//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <AVKit/AVPlayerController.h>

@class AVPlayer, AVValueTiming, CALayer<AVPlayerLayer>, NSArray, NSDictionary, NSObject<OS_dispatch_queue>;

@interface AVPlayerControllerInternal : AVPlayerController
{
    unsigned int _jKeyDown:1;
    unsigned int _kKeyDown:1;
    unsigned int _lKeyDown:1;
    CALayer<AVPlayerLayer> *_playerLayer;
    id _deviceBatteryStateDidChangeObserver;
    unsigned int _deviceBatteryMonitoringWasEnabled:1;
    unsigned int _deviceBatteryChargingOrFull:1;
    unsigned int _playingOnSecondScreen:1;
    NSArray *_audioMediaSelectionOptions;
    NSArray *_legibleMediaSelectionOptions;
    id _timeObserverToken;
    id _playerItemTimeJumpedObserver;
    id _playerItemDidPlayToEndTimeObserver;
    id _audioSessionInterruptionObserver;
    unsigned int _audioSessionInterrupted:1;
    double _rateBeforeAudioSessionInterruption;
    unsigned int _pausedDuringAudioSessionInterruption:1;
    BOOL _looping;
    int _actionAtItemEnd;
    NSObject<OS_dispatch_queue> *_seekQueue;
    BOOL _isSeeking;
    BOOL _pendingSeek;
    CDStruct_1b6d18a9 _seekToTime;
    CDStruct_1b6d18a9 _toleranceBefore;
    CDStruct_1b6d18a9 _toleranceAfter;
    BOOL _isScanningForward;
    BOOL _isScanningBackward;
    unsigned int _scanningCount;
    double _preScanningRate;
    NSObject<OS_dispatch_queue> *_setRateWithThrottlingQueue;
    BOOL _isActuallySettingRateWithThrottling;
    BOOL _pendingSetRateWithThrottling;
    double _setToRate;
    BOOL _ignoreBackwardAndForwardScans;
    unsigned int _shouldPlayWhenLikelyToKeepUp:1;
    BOOL _scrubbing;
    BOOL _composable;
    BOOL _hasProtectedContent;
    BOOL _preventingIdleSystemSleep;
    BOOL _preventingIdleDisplaySleep;
    BOOL _disablingAutomaticTermination;
    AVPlayer *_player;
    AVValueTiming *_timing;
    NSDictionary *_metadata;
    NSArray *_contentChapters;
    NSArray *_availableMetadataFormats;
    double _rateBeforeScrubBegan;
}

+ (id)keyPathsForValuesAffectingExternalPlaybackAirPlayDeviceLocalizedName;
+ (id)keyPathsForValuesAffectingExternalPlaybackType;
+ (id)keyPathsForValuesAffectingExternalPlaybackActive;
+ (id)keyPathsForValuesAffectingPlayingOnExternalScreen;
+ (id)keyPathsForValuesAffectingAllowsExternalPlayback;
+ (id)keyPathsForValuesAffectingCanSeekChapterBackward;
+ (id)keyPathsForValuesAffectingCanSeekChapterForward;
+ (id)keyPathsForValuesAffectingCanSeekFrameBackward;
+ (id)keyPathsForValuesAffectingCanSeekFrameForward;
+ (id)keyPathsForValuesAffectingCanSeekToEnd;
+ (id)keyPathsForValuesAffectingCanSeekToBeginning;
+ (id)keyPathsForValuesAffectingCanScanBackward;
+ (id)keyPathsForValuesAffectingCanScanForward;
+ (id)keyPathsForValuesAffectingCanSeek;
+ (id)keyPathsForValuesAffectingHasShareableContent;
+ (id)keyPathsForValuesAffectingHasTrimmableContent;
+ (id)keyPathsForValuesAffectingHasLiveStreamingContent;
+ (id)keyPathsForValuesAffectingHasContentChapters;
+ (id)keyPathsForValuesAffectingHasEnabledVideo;
+ (id)keyPathsForValuesAffectingHasEnabledAudio;
+ (id)keyPathsForValuesAffectingLoadedTimeRanges;
+ (id)keyPathsForValuesAffectingContentDurationWithinEndTimes;
+ (id)keyPathsForValuesAffectingMaxTime;
+ (id)keyPathsForValuesAffectingMinTime;
+ (id)keyPathsForValuesAffectingContentDimensions;
+ (id)keyPathsForValuesAffectingContentDuration;
+ (id)keyPathsForValuesAffectingHasContent;
+ (id)keyPathsForValuesAffectingVolume;
+ (id)keyPathsForValuesAffectingCanTogglePlayback;
+ (id)keyPathsForValuesAffectingCanPause;
+ (id)keyPathsForValuesAffectingPlaying;
+ (id)keyPathsForValuesAffectingCanPlay;
+ (id)keyPathsForValuesAffectingRate;
+ (id)keyPathsForValuesAffectingSeekableTimeRanges;
+ (id)keyPathsForValuesAffectingError;
+ (id)keyPathsForValuesAffectingStatus;
+ (id)keyPathsForValuesAffectingHasLegibleMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasAudioMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingHasMediaSelectionOptions;
+ (id)keyPathsForValuesAffectingShouldPreventIdleDisplaySleep;
@property(nonatomic, getter=isDisablingAutomaticTermination) BOOL disablingAutomaticTermination; // @synthesize disablingAutomaticTermination=_disablingAutomaticTermination;
@property(nonatomic, getter=isPreventingIdleDisplaySleep) BOOL preventingIdleDisplaySleep; // @synthesize preventingIdleDisplaySleep=_preventingIdleDisplaySleep;
@property(nonatomic, getter=isPreventingIdleSystemSleep) BOOL preventingIdleSystemSleep; // @synthesize preventingIdleSystemSleep=_preventingIdleSystemSleep;
@property(nonatomic) double rateBeforeScrubBegan; // @synthesize rateBeforeScrubBegan=_rateBeforeScrubBegan;
@property(retain, nonatomic) NSArray *availableMetadataFormats; // @synthesize availableMetadataFormats=_availableMetadataFormats;
@property(nonatomic) BOOL hasProtectedContent; // @synthesize hasProtectedContent=_hasProtectedContent;
@property(nonatomic, getter=isComposable) BOOL composable; // @synthesize composable=_composable;
@property(retain, nonatomic) NSArray *contentChapters; // @synthesize contentChapters=_contentChapters;
@property(retain, nonatomic) NSDictionary *metadata; // @synthesize metadata=_metadata;
@property(retain, nonatomic) AVValueTiming *timing; // @synthesize timing=_timing;
@property(nonatomic, getter=isScrubbing) BOOL scrubbing; // @synthesize scrubbing=_scrubbing;
@property(retain, nonatomic) AVPlayer *player; // @synthesize player=_player;
- (void).cxx_destruct;
- (id)scanningDelays;
- (float)preferredRate;
- (id)externalPlaybackAirPlayDeviceLocalizedName;
- (int)externalPlaybackType;
- (BOOL)isPlayingOnSecondScreen;
- (BOOL)isExternalPlaybackActive;
- (BOOL)isPlayingOnExternalScreen;
- (void)setAllowsExternalPlayback:(BOOL)arg1;
- (BOOL)allowsExternalPlayback;
- (void)updateTiming;
- (void)seekChapterBackward:(id)arg1;
- (BOOL)canSeekChapterBackward;
- (void)seekChapterForward:(id)arg1;
- (BOOL)canSeekChapterForward;
- (void)seekToChapter:(id)arg1;
- (void)gotoEndOfSeekableRanges:(id)arg1;
- (void)skipBackwardThirtySeconds:(id)arg1;
- (void)seekFrameBackward:(id)arg1;
- (BOOL)canSeekFrameBackward;
- (void)seekFrameForward:(id)arg1;
- (BOOL)canSeekFrameForward;
- (void)seekToEnd:(id)arg1;
- (BOOL)canSeekToEnd;
- (void)seekToBeginning:(id)arg1;
- (BOOL)canSeekToBeginning;
- (void)endScanningBackward:(id)arg1;
- (void)_updateScanningBackwardRate;
- (void)beginScanningBackward:(id)arg1;
- (void)scanBackward:(id)arg1;
- (BOOL)canScanBackward;
- (void)endScanningForward:(id)arg1;
- (void)_updateScanningForwardRate;
- (void)beginScanningForward:(id)arg1;
- (void)scanForward:(id)arg1;
- (BOOL)canScanForward;
- (void)seekByTimeInterval:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)seekByTimeInterval:(double)arg1;
- (void)actuallySeekToTime;
- (void)seekToTime:(double)arg1 toleranceBefore:(double)arg2 toleranceAfter:(double)arg3;
- (void)endScrubbing;
- (void)beginScrubbing;
- (void)seekToTime:(double)arg1;
- (BOOL)isSeeking;
- (BOOL)canSeek;
- (BOOL)_isMarkedNotSerializablePlayerItem:(id)arg1;
- (BOOL)_isRestrictedFromSavingPlayerItem:(id)arg1;
- (BOOL)hasShareableContent;
- (BOOL)hasTrimmableContent;
- (BOOL)hasLiveStreamingContent;
- (BOOL)hasContentChapters;
- (BOOL)hasEnabledVideo;
- (BOOL)hasEnabledAudio;
- (id)loadedTimeRanges;
- (double)contentDurationWithinEndTimes;
- (void)setMaxTime:(double)arg1;
- (double)maxTime;
- (void)setMinTime:(double)arg1;
- (double)minTime;
- (struct CGSize)contentDimensions;
- (double)contentDuration;
- (BOOL)hasContent;
- (void)toggleMuted:(id)arg1;
- (void)changeVolumeToMaximum:(id)arg1;
- (void)changeVolumeToMinimum:(id)arg1;
- (void)decreaseVolume:(id)arg1;
- (void)increaseVolume:(id)arg1;
- (void)setVolume:(double)arg1;
- (double)volume;
- (void)setLooping:(BOOL)arg1;
- (BOOL)isLooping;
- (void)togglePlayback:(id)arg1;
- (BOOL)canTogglePlayback;
- (void)pause:(id)arg1;
- (BOOL)canPause;
- (void)autoplay:(id)arg1;
- (void)play:(id)arg1;
- (void)setPlaying:(BOOL)arg1;
- (BOOL)isPlaying;
- (BOOL)canPlay;
- (void)actuallySetRateWithThrottling;
- (void)setRateWithThrottling:(double)arg1;
- (void)setRate:(double)arg1;
- (double)rate;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (id)seekableTimeRanges;
- (id)error;
- (int)status;
- (void)dealloc;
- (id)init;
- (id)initWithPlayer:(id)arg1;
- (id)_playableMediaSelectionOptionsForMediaCharacteristic:(id)arg1;
- (id)_selectedMediaOptionWithMediaCharacteristic:(id)arg1;
- (void)_setMediaOption:(id)arg1 mediaCharacteristic:(id)arg2;
- (id)_extendedLanguageTagsForOptions:(id)arg1;
- (id)_pushSystemLanguageToTop:(id)arg1;
- (void)_enableAutoMediaSelection:(id)arg1;
- (void)_disableLegibleMediaSelectionOptions:(id)arg1;
- (id)_subtitlesForOptions:(id)arg1;
- (id)_auxiliaryAudioOptionsForMediaSelectionOptions:(id)arg1;
- (id)_DVSAudioOptionsForMediaSelectionOptions:(id)arg1;
- (id)_mainAudioOptionsForMediaSelectionOptions:(id)arg1;
- (id)_languageCodesForOptions:(id)arg1;
- (id)_mediaSelectionOptionForLanguageCode:(id)arg1 options:(id)arg2 preferAC3:(BOOL)arg3;
- (id)_mediaSelectionOptionForLanguageCode:(id)arg1 options:(id)arg2;
- (id)legibleOptions;
- (id)audioOptions;
- (void)reloadLegibleOptions;
- (void)reloadAudioOptions;
- (void)reloadOptions;
- (void)setCurrentLegibleMediaSelectionOption:(id)arg1;
- (id)currentLegibleMediaSelectionOption;
- (void)setLegibleMediaSelectionOptions:(id)arg1;
- (id)legibleMediaSelectionOptions;
- (BOOL)hasLegibleMediaSelectionOptions;
- (id)currentAudioMediaSelectionOption;
- (void)setCurrentAudioMediaSelectionOption:(id)arg1;
- (void)setAudioMediaSelectionOptions:(id)arg1;
- (id)audioMediaSelectionOptions;
- (BOOL)hasAudioMediaSelectionOptions;
- (BOOL)hasMediaSelectionOptions;
- (void)_Starsky_observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
@property(readonly, nonatomic) BOOL shouldPreventIdleDisplaySleep;
@property(nonatomic, getter=isDeviceBatteryChargingOrFull) BOOL deviceBatteryChargingOrFull;
- (void)_Starsky_dealloc;
- (void)_Starsky_init;
- (void)endScrubbing:(id)arg1;
- (void)beginScrubbing:(id)arg1;
- (void)setCALayerDestinationIsTVOut:(BOOL)arg1;
- (BOOL)CALayerDestinationIsTVOut;
- (void)setPlayingOnSecondScreen:(BOOL)arg1;

@end

