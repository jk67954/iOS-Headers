//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "HDDiagnosticObject.h"
#import "HDQueryServerDelegate.h"
#import "HDServer.h"

@class HDAuthorizationServer, HDClient, HDDaemon, HDDataCollectionManager, HDDataManager, HDDatabase, HDHealthDeviceManager, HDIdentifierTable, NSMutableDictionary, NSMutableSet, NSObject<OS_dispatch_queue>, NSString;

@interface HDServer : NSObject <HDQueryServerDelegate, HDDiagnosticObject, HDServer>
{
    HDIdentifierTable *_healthServiceDiscoveryServerIDs;
    NSMutableDictionary *_healthServiceDiscoveryClientIDs;
    HDIdentifierTable *_healthDeviceSessionServerIDs;
    NSMutableDictionary *_healthServiceSessionClientIDs;
    NSMutableSet *_healthServiceClosedSessionServerIDs;
    NSMutableSet *_healthServiceClosedSessionClientIDs;
    NSMutableDictionary *_queryServersByUUID;
    HDDaemon *_daemon;
    HDClient *_client;
    HDDataCollectionManager *_dataCollectMgr;
    HDDatabase *_database;
    HDHealthDeviceManager *_healthDeviceManager;
    HDDataManager *_dataMgr;
    HDAuthorizationServer *_authorizationServer;
    NSObject<OS_dispatch_queue> *_queue;
    NSObject<OS_dispatch_queue> *_authQueue;
    NSString *_serverID;
}

+ (id)serverWithClient:(id)arg1 healthDaemon:(id)arg2;
+ (BOOL)_isClientEntitled:(id)arg1 error:(id *)arg2;
+ (BOOL)_isHealthAllowedWithError:(id *)arg1;
+ (BOOL)_isDeviceSupportedWithError:(id *)arg1;
@property(retain, nonatomic) NSString *serverID; // @synthesize serverID=_serverID;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *authQueue; // @synthesize authQueue=_authQueue;
@property(retain, nonatomic) NSObject<OS_dispatch_queue> *queue; // @synthesize queue=_queue;
@property(retain, nonatomic) HDAuthorizationServer *authorizationServer; // @synthesize authorizationServer=_authorizationServer;
@property(retain, nonatomic) HDDataManager *dataMgr; // @synthesize dataMgr=_dataMgr;
@property(retain, nonatomic) HDHealthDeviceManager *healthDeviceManager; // @synthesize healthDeviceManager=_healthDeviceManager;
@property(retain, nonatomic) HDDatabase *database; // @synthesize database=_database;
@property(retain, nonatomic) HDDataCollectionManager *dataCollectMgr; // @synthesize dataCollectMgr=_dataCollectMgr;
@property(retain, nonatomic) HDClient *client; // @synthesize client=_client;
@property(nonatomic) __weak HDDaemon *daemon; // @synthesize daemon=_daemon;
- (void).cxx_destruct;
- (void)fetchDiagnosticsWithKey:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)stopRecordingDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)startRecordingDataToFile:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)stopReplayingDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)startReplayingDataFromFile:(id)arg1 repeat:(BOOL)arg2 completion:(CDUnknownBlockType)arg3;
- (void)stopFakingDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)startFakingDataWithActivity:(int)arg1 speed:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (BOOL)_clientHasUtilityEntitlementWithError:(id *)arg1;
- (void)performMigrationWithCompletion:(CDUnknownBlockType)arg1;
- (void)getDatabaseSizeInBytesWithCompletion:(CDUnknownBlockType)arg1;
- (id)diagnosticDescription;
- (BOOL)_isClientSessionValid:(unsigned int)arg1;
- (BOOL)_isServerSessionValid:(unsigned int)arg1;
- (void)_closeSessionBetweenServer:(unsigned int)arg1 andClient:(unsigned int)arg2;
- (unsigned int)_sessionClientIdentifierForServerIdentifier:(unsigned int)arg1;
- (unsigned int)_sessionServerIdentifierForClientIdentifier:(unsigned int)arg1;
- (unsigned int)_discoveryServerIdentifierForClientIdentifier:(unsigned int)arg1;
- (void)_closeDiscoveryBetweenServer:(unsigned int)arg1 andClient:(unsigned int)arg2;
- (unsigned int)_healthDeviceClientSessionIdentifier:(unsigned int)arg1;
- (unsigned int)_healthDeviceClientDiscoveryIdentifier:(unsigned int)arg1;
- (void)performHealthServiceOperation:(id)arg1 onSession:(unsigned int)arg2 withParameters:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)getHealthServiceProperty:(id)arg1 forSession:(unsigned int)arg2 withHandler:(CDUnknownBlockType)arg3;
- (void)removePeripheral:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)addPeripheral:(id)arg1 name:(id)arg2 forServices:(id)arg3 withCompletion:(CDUnknownBlockType)arg4;
- (void)removePairingForHealthService:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)addPairingForHealthService:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)getHealthServicePairingsWithHandler:(CDUnknownBlockType)arg1;
- (void)endHealthServiceSession:(unsigned int)arg1;
- (void)startHealthServiceSession:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)endHealthServiceDiscovery:(unsigned int)arg1;
- (void)startHealthServiceDiscovery:(int)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)endBluetoothStatusUpdates;
- (void)beginBluetoothStatusUpdates:(CDUnknownBlockType)arg1;
- (void)removeDefaultForKey:(id)arg1 withCompletion:(CDUnknownBlockType)arg2;
- (void)setDefaultValue:(id)arg1 forKey:(id)arg2 withCompletion:(CDUnknownBlockType)arg3;
- (void)getDefaultForKey:(id)arg1 withHandler:(CDUnknownBlockType)arg2;
- (void)setCharacteristic:(id)arg1 forDataType:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)fetchCharacteristicWithDataType:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)deleteMedicalIDDataWithCompletion:(CDUnknownBlockType)arg1;
- (void)updateMedicalIDData:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)medicalIDDataCreateIfNecessary:(BOOL)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_performIfAuthorizedForMedicalID:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (BOOL)_hasMedicalIDDataAccess;
- (void)deleteSourceWithBundleIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)deleteAllSamplesWithTypes:(id)arg1 sourceBundleIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)setOrderedSources:(id)arg1 forObjectType:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)orderedSourcesForObjectType:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)allSourcesWithCompletion:(CDUnknownBlockType)arg1;
- (void)hasSourceWithBundleIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)queryServerDidDeactivate:(id)arg1;
- (void)queryServerDidStopDataCollection:(id)arg1;
- (void)queryServerDidStartDataCollection:(id)arg1;
- (id)authorizationServerForQueryServer:(id)arg1;
- (void)setDataCollectionOptionForType:(id)arg1 key:(id)arg2 value:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)closeTransactionWithDataType:(id)arg1 anchor:(id)arg2 ackTime:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setBackgroundDeliveryFrequency:(int)arg1 forDataType:(id)arg2 handler:(CDUnknownBlockType)arg3;
- (void)addSamples:(id)arg1 toWorkout:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)_startQueryServer:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)startCorrelationQuery:(id)arg1 correlationType:(id)arg2 correlationFilter:(id)arg3 sampleFilters:(id)arg4 client:(id)arg5 handler:(CDUnknownBlockType)arg6;
- (void)startObserverQuery:(id)arg1 sampleType:(id)arg2 filter:(id)arg3 client:(id)arg4 handler:(CDUnknownBlockType)arg5;
- (void)startAnchoredObjectQuery:(id)arg1 sampleType:(id)arg2 filter:(id)arg3 anchor:(id)arg4 limit:(unsigned int)arg5 client:(id)arg6 handler:(CDUnknownBlockType)arg7;
- (void)startStatisticsCollectionQuery:(id)arg1 sampleType:(id)arg2 filter:(id)arg3 anchorDate:(id)arg4 statisticsOptions:(unsigned int)arg5 intervalComponents:(id)arg6 shouldListenForUpdates:(BOOL)arg7 client:(id)arg8 handler:(CDUnknownBlockType)arg9;
- (void)startStatisticsQuery:(id)arg1 sampleType:(id)arg2 filter:(id)arg3 statisticsOptions:(unsigned int)arg4 client:(id)arg5 handler:(CDUnknownBlockType)arg6;
- (void)startSourcesQuery:(id)arg1 sampleType:(id)arg2 filter:(id)arg3 client:(id)arg4 handler:(CDUnknownBlockType)arg5;
- (void)startSampleQuery:(id)arg1 sampleType:(id)arg2 filter:(id)arg3 maxResults:(unsigned int)arg4 sortDescriptors:(id)arg5 client:(id)arg6 handler:(CDUnknownBlockType)arg7;
- (void)deleteDataObjects:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)saveDataObjects:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (CDUnknownBlockType)_authorizationPromptHandler;
- (void)_performIfAuthorizedToDeleteObjects:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (void)_performIfAuthorizedToSaveObjects:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (void)_performIfAuthorizedToReadTypes:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (id)_clientRemoteObjectProxy;
- (void)endAuthorizationDelegateTransactionWithError:(id)arg1;
- (void)beginAuthorizationDelegateTransactionWithSessionIdentifier:(id)arg1 handler:(CDUnknownBlockType)arg2;
- (void)resetAuthorizationStatusForBundleIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)setRequestedAuthorizationForBundleIdentifier:(id)arg1 shareTypes:(id)arg2 readTypes:(id)arg3 completion:(CDUnknownBlockType)arg4;
- (void)setAuthorizationStatuses:(id)arg1 forBundleIdentifier:(id)arg2 completion:(CDUnknownBlockType)arg3;
- (void)allAuthorizationRecordsForType:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)allAuthorizationRecordsForBundleIdentifier:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)requestAuthorizationToShareTypes:(id)arg1 readTypes:(id)arg2 shouldPrompt:(BOOL)arg3 completion:(CDUnknownBlockType)arg4;
- (void)authorizationStatusForType:(id)arg1 completion:(CDUnknownBlockType)arg2;
- (void)_requirePrivateHealthKitEntitlementUsingBlock:(CDUnknownBlockType)arg1 errorHandler:(CDUnknownBlockType)arg2;
- (void)_requireEntitlement:(id)arg1 usingBlock:(CDUnknownBlockType)arg2 errorHandler:(CDUnknownBlockType)arg3;
- (void)dealloc;
- (void)invalidate;
- (id)initWithClient:(id)arg1 healthDaemon:(id)arg2;

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned int hash;
@property(readonly) Class superclass;

@end

