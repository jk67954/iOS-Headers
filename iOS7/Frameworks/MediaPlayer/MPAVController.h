/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "AVAudioSessionDelegateMediaPlayerOnly-Protocol.h"
#import "MPAVControllerProtocol-Protocol.h"
#import "MPAVErrorResolverDelegate-Protocol.h"
#import "MPAudioDeviceControllerDelegate-Protocol.h"

@class AVPlayerLayer, CALayer, MPAVControllerToAggregateDCommunicator, MPAVDestinationBrowser, MPAVErrorResolver, MPAVItem, MPAVPlaylistManager, MPAudioDeviceController, MPMediaItem, MPMediaQuery, MPQueueFeeder, MPQueuePlayer, MPVideoView, NSArray, NSDate, NSDictionary, NSMutableArray, NSMutableSet, NSNotification, NSObject<OS_dispatch_source>, NSString;

@interface MPAVController : NSObject <AVAudioSessionDelegateMediaPlayerOnly, MPAudioDeviceControllerDelegate, MPAVErrorResolverDelegate, MPAVControllerProtocol>
{
    MPAVPlaylistManager *_avPlaylistManager;
    _Bool _forceSynchronousQueueFilling;
    _Bool _managesSystemDownloads;
    int _playbackMode;
    _Bool _valid;
    MPAudioDeviceController *_audioDeviceController;
    MPQueueFeeder *_feeder;
    MPAVErrorResolver *_itemErrorResolver;
    NSDictionary *_pickedRouteDescription;
    AVPlayerLayer *_videoLayer;
    unsigned long long _videoLayerUsageCount;
    MPVideoView *_videoView;
    unsigned long long _tickTimerEnabled;
    struct __CFRunLoopTimer *_tickTimer;
    double _tickInterval;
    struct __CFRunLoopTimer *_currentItemBookkeepingTimer;
    long long _indexChangeDirection;
    unsigned long long _itemIndexAtDeath;
    long long _lastDisconnectReason;
    double _lastKnownTimeBeforeDeath;
    double _lastPlaybackIndexChangeTime;
    double _lastSetTime;
    double _lastSetTimeChangeTime;
    unsigned int _hasDelayedCurrentTimeToSet:1;
    unsigned int _forceDelayedCurrentTimeToSet:1;
    double _delayedCurrentTimeToSet;
    long long _delayedCurrentTimeOptions;
    unsigned long long _lastSetTimeMarker;
    double _temporaryChapterTime;
    unsigned int _autoPlayWhenLikelyToKeepUp:1;
    unsigned int _autoplayDisabledForCurrentItem:1;
    long long _eqPreset;
    double _nextFadeOutDuration;
    id _boundaryTimeObserver;
    NSArray *_boundaryTimes;
    unsigned long long _boundaryTimeIndexLastPosted;
    float _rateBeforeSeek;
    float _inflightSeekRate;
    unsigned long long _scanLevel;
    long long _scanDirection;
    long long _resetRateAfterSeekingUpdateDisabled;
    unsigned long long _seeklessState;
    unsigned int _isSeekingOrScrubbing:1;
    unsigned int _resetRateAfterSeeking:1;
    unsigned int _activeRewindHoldingAtStart:1;
    double _lastSeekableEnd;
    double _whenSawSeekableEnd;
    double _maxSeekableFwd;
    double _seekFwdSlop;
    double _lastSeekableStart;
    double _whenSawSeekableStart;
    double _maxSeekableRev;
    double _seekRevSlop;
    unsigned int _canSeekRev:1;
    unsigned int _canSeekFwd:1;
    unsigned int _alwaysPlayWheneverPossible:1;
    unsigned int _stopAtEnd:1;
    unsigned int _didReachEnd:1;
    unsigned int _pausedDuringInterruption:1;
    unsigned int _resumePlaybackWhenActive:1;
    unsigned int _useApplicationAudioSession:1;
    unsigned int _playInBackgroundUserDefaultEnabled:1;
    unsigned int _canPlayFastForward:1;
    unsigned int _canPlayFastReverse:1;
    unsigned long long _state;
    unsigned long long _displayOverridePlaybackState;
    unsigned long long _bufferingState;
    NSNotification *_delayedPlaybackStateNotification;
    NSObject<OS_dispatch_source> *_stallTimerSource;
    NSMutableArray *_queueFeederStateStack;
    int _feederMode;
    MPAVControllerToAggregateDCommunicator *_aggregateDCommunicator;
    double _itemInitialBookmarkTime;
    float _rateBeforeResignActive;
    long long _ubiquitousBookkeepingDisabledCount;
    double _secondsSinceUbiquitousCheckpoint;
    Class _videoViewClass;
    NSString *_audioSessionModeOverride;
    double _lastInterruptionEnd;
    _Bool _shouldEnforceHDCP;
    NSMutableSet *_clientsWantingAirPlayVideo;
    _Bool _currentItemDidLoad;
    _Bool _didResolveError;
    _Bool _disallowsAMRAudio;
    _Bool _disableAirPlayMirroringDuringPlayback;
    NSDate *_itemDidChangeDate;
    unsigned long long _stallBackgroundTaskIdentifier;
    _Bool _shouldSkipToNextTrackOnResumeFromInterruption;
    _Bool _autoReshufflingDisabled;
    MPAVDestinationBrowser *_destinationBrowser;
}

+ (id)_playerKeysToObserve;
+ (id)_itemKeysToObserve;
+ (id)_controllerKeysToObserve;
+ (_Bool)outputSupportsAC3;
+ (_Bool)isNetworkSupportedPath:(id)arg1;
+ (id)sharedInstance;
+ (void)initialize;
@property(nonatomic) _Bool autoReshufflingDisabled; // @synthesize autoReshufflingDisabled=_autoReshufflingDisabled;
@property(nonatomic) _Bool shouldSkipToNextTrackOnResumeFromInterruption; // @synthesize shouldSkipToNextTrackOnResumeFromInterruption=_shouldSkipToNextTrackOnResumeFromInterruption;
@property(nonatomic) unsigned long long state; // @synthesize state=_state;
@property(nonatomic) _Bool shouldEnforceHDCP; // @synthesize shouldEnforceHDCP=_shouldEnforceHDCP;
@property(nonatomic) double nextFadeOutDuration; // @synthesize nextFadeOutDuration=_nextFadeOutDuration;
@property(nonatomic) _Bool managesSystemDownloads; // @synthesize managesSystemDownloads=_managesSystemDownloads;
@property(nonatomic) _Bool forceSynchronousQueueFilling; // @synthesize forceSynchronousQueueFilling=_forceSynchronousQueueFilling;
@property(nonatomic) int feederMode; // @synthesize feederMode=_feederMode;
@property(readonly, nonatomic) MPQueueFeeder *feeder; // @synthesize feeder=_feeder;
@property(nonatomic) long long EQPreset; // @synthesize EQPreset=_eqPreset;
@property(nonatomic) unsigned long long displayOverridePlaybackState; // @synthesize displayOverridePlaybackState=_displayOverridePlaybackState;
@property(readonly, nonatomic) MPAVDestinationBrowser *destinationBrowser; // @synthesize destinationBrowser=_destinationBrowser;
@property(retain, nonatomic) NSString *audioSessionModeOverride; // @synthesize audioSessionModeOverride=_audioSessionModeOverride;
- (void).cxx_destruct;
- (void)_pausePlaybackIfNecessaryIgnoringVideoLayerAttachment:(_Bool)arg1;
- (void)_pausePlaybackIfNecessary;
- (_Bool)_canPlayItem:(id)arg1;
- (_Bool)_itemIsRestricted:(id)arg1;
- (void)_playbackFailedWithError:(id)arg1 canResolve:(_Bool)arg2;
- (id)_pickedRouteDescription;
- (void)_resumeTickTimer;
- (void)_pauseTickTimer;
- (id)_extractImageFromMetadata:(id)arg1;
- (void)_clearSeekingIntervalsForStreaming;
- (void)_updateSeekingIntervalsForStreaming;
- (void)_delayedSetCurrentTime;
- (void)_updateScanningRate;
- (void)setRateForScanning:(float)arg1;
- (void)_updateProgress:(struct __CFRunLoopTimer *)arg1;
- (void)_unregisterForAVPlaylistManagerObservation:(id)arg1;
- (void)_unregisterForAVItemNotifications:(id)arg1;
- (void)_setValid:(_Bool)arg1;
- (void)_setVideoLayerAttachedToPlayer:(_Bool)arg1 force:(_Bool)arg2 pauseIfNecessary:(_Bool)arg3;
- (_Bool)_isVideoLayerAttachedToPlayer;
- (void)_setState:(unsigned long long)arg1;
- (void)_setItemErrorResolver:(id)arg1;
- (void)_clearResetRateAfterSeeking;
- (void)_configureUpdateCurrentItemBookkeepingTimer;
- (void)_cancelUpdateCurrentItemBookkeepingTimer;
- (void)_resumeBookkeepingTimer;
- (void)_pauseBookkeepingTimer;
- (void)_scheduleUpdateCurrentItemBookkeepingTimer;
- (unsigned long long)_displayPlaybackState;
- (void)setAutoclearingDisplayOverridePlaybackState:(unsigned long long)arg1;
- (void)autoclearDisplayOverride;
- (void)_postPlaybackStateChangedNotificationWithOriginalState:(unsigned long long)arg1 newState:(unsigned long long)arg2 delayable:(_Bool)arg3;
- (void)_delayedPostPlaybackStateChangedNotification;
- (void)_setActionAtEndAttributeForState:(unsigned long long)arg1;
- (void)_setBufferingState:(unsigned long long)arg1;
- (void)_attemptAutoPlay;
- (void)_resetQueue:(_Bool)arg1 useVideoLayer:(_Bool)arg2;
- (void)_resetInternalState;
- (void)_registerForAVPlaylistManagerObservation:(id)arg1;
- (void)_registerForAVItemNotifications:(id)arg1;
- (void)_reloadTimeMarkerObservationsForItem:(id)arg1;
- (void)_checkForBoundaryTimeCrossing;
- (unsigned long long)_currentIndexInBoundaryCMTimes:(id)arg1;
- (id)embeddedDataTimesForItem:(id)arg1;
- (void)_prepareToPlayItem:(id)arg1;
- (unsigned long long)_playbackIndexForDelta:(long long)arg1 fromIndex:(unsigned long long)arg2 ignoreElapsedTime:(_Bool)arg3;
- (_Bool)_isDownloadingCloudOrOtherItem:(id)arg1;
- (_Bool)_isDownloadingCloudItem:(id)arg1;
- (_Bool)_isCloudItem:(id)arg1;
- (void)_endSeekAndChangeRate:(_Bool)arg1;
- (_Bool)_connectAVPlaylistManager;
- (void)_configureAVPlaylistManager:(id)arg1;
- (void)_clearVideoLayer;
- (_Bool)_changeChapterTimeMarkerIndexBy:(long long)arg1;
- (void)_cancelStallTimer;
- (id)_avPlaylistManager;
- (void)_verifyDisplayProtection;
- (void)_delayedUpdateTimeMarker;
- (void)_delayedUpdateScanningRate;
- (void)_delayedPlaybackIndexChange;
- (void)notifyAVPlayerItemDidChange:(id)arg1;
- (void)notifyAVPlayerItemWillChange:(id)arg1;
- (void)_mediaLibraryDynamicPropertiesDidChangeNotification:(id)arg1;
- (void)_updateCurrentTimeToBookmarkTimeForDynamicPropertyChange;
- (void)_applicationWillEnterForegroundNotification:(id)arg1;
- (void)_applicationSuspended:(id)arg1;
- (void)_applicationSuspendedEventsOnly:(id)arg1;
- (void)_applicationDidEnterBackgroundNotification:(id)arg1;
- (void)_applicationDidBecomeActive:(id)arg1;
- (void)_applicationWillResignActive:(id)arg1;
- (void)observeValueForKeyPath:(id)arg1 ofObject:(id)arg2 change:(id)arg3 context:(void *)arg4;
- (void)airPlayVideoEnded;
- (void)_volumeDidChangeNotification:(id)arg1;
- (void)_tracksDidChange:(id)arg1;
- (void)_timedMetadataAvailable:(id)arg1;
- (void)_timeHasJumpedNotification:(id)arg1;
- (void)_streamUnlikelyToKeepUp:(id)arg1;
- (void)_streamRanDry:(id)arg1;
- (void)_streamLikelyToKeepUp:(id)arg1;
- (void)_streamBufferFull:(id)arg1;
- (void)_sizeDidChange:(id)arg1;
- (void)_serverConnectionDidDie:(id)arg1;
- (void)_disconnectAVPlaylistManagerWithReason:(long long)arg1;
- (void)_rateDidChange:(id)arg1;
- (void)_updateCurrentItemBookkeepingForTimerCallback;
- (void)_updateCurrentItemBookkeepingMarkedAsCheckpoint:(_Bool)arg1;
@property(nonatomic) _Bool ubiquitousBookkeepingEnabled;
- (void)endInterruptionFromInterruptor:(id)arg1 category:(id)arg2 flags:(unsigned long long)arg3;
- (void)beginInterruption;
- (void)_itemWillChange:(id)arg1;
- (void)_itemReadyToPlay:(id)arg1;
- (void)_itemPlaybackDidEndNotification:(id)arg1;
- (void)_itemHeartbeatIsInvalidNotification:(id)arg1;
- (void)_itemFailedToPlayToEnd:(id)arg1;
- (void)_itemFailedToPlayToEndNotification:(id)arg1;
- (void)_playerFailedToQueueNotification:(id)arg1;
- (void)_itemDidChange:(id)arg1;
- (_Bool)_isChangingQueueContents;
- (void)_itemTimeMarkersAvailableNotification:(id)arg1;
- (void)_itemAssetIsLoadedNotification:(id)arg1;
- (void)_isExternalPlaybackActiveDidChange:(id)arg1;
- (void)_firstVideoFrameDisplayed:(id)arg1;
- (void)_postMPAVControllerItemReadyToPlayNotificationWithItem:(id)arg1;
- (void)_postMPAVControllerSizeDidChangeNotificationWithItem:(id)arg1;
- (void)errorResolver:(id)arg1 didResolveError:(id)arg2 withResolution:(long long)arg3;
- (void)audioDeviceControllerAudioRoutesChanged:(id)arg1;
- (void)skipToSeekableEnd;
- (void)skipToSeekableStart;
- (_Bool)canPlayFastReverse;
- (_Bool)canSeekForwards;
- (_Bool)canSeekBackwards;
- (_Bool)isLiveStreaming;
- (double)timeOfSeekableEnd;
- (double)timeOfSeekableStart;
- (double)timeOfPlayableEnd;
- (double)timeOfPlayableStart;
@property(readonly, nonatomic) double playableDurationOfCurrentItemIfAvailable;
@property(readonly, nonatomic) double durationOfCurrentItemIfAvailable;
- (void)_setVideoViewClass:(Class)arg1;
@property(readonly, nonatomic) _Bool showPlaybackStateOverlaysOnTVOut;
- (_Bool)shouldHaveNoActionAtEndForState:(unsigned long long)arg1;
- (void)finalizeBookkeepingNow;
- (void)updateBookkeepingNow;
- (void)ensureFeederIsSubclass:(Class)arg1;
- (void)ensureFeederIsClass:(Class)arg1;
- (void)restorePreviousFeederState;
- (void)saveCurrentFeederState;
@property(readonly, nonatomic) MPVideoView *videoView;
@property(readonly, nonatomic) CALayer *videoLayer;
@property(nonatomic, getter=destinationIsTVOut, setter=setDestinationIsTVOut:) _Bool destinationIsTVOut;
@property(nonatomic) _Bool usesAudioOnlyModeForExternalPlayback;
- (void)switchToVideoPlayback:(_Bool)arg1 forItem:(id)arg2;
- (void)switchToAudioPlayback:(_Bool)arg1 forItem:(id)arg2;
- (void)setCurrentTime:(double)arg1 options:(long long)arg2;
@property(copy, nonatomic) NSString *externalPlaybackVideoGravity;
- (void)setActive:(_Bool)arg1;
- (void)reloadFeederWithStartQueueIndex:(unsigned long long)arg1;
@property(readonly, nonatomic) id _playerAVAudioSession;
- (void)feederChangedContents:(id)arg1;
- (void)switchToFeeder:(id)arg1 mode:(int)arg2 index:(unsigned long long)arg3 play:(_Bool)arg4;
- (void)_switchToFeeder:(id)arg1 mode:(int)arg2 index:(unsigned long long)arg3 play:(_Bool)arg4 configureFeederBlock:(id)arg5;
@property(readonly, nonatomic) long long externalPlaybackType;
- (void)ensureHasAVPlaylistManager;
- (void)endUsingVideoLayer;
@property(nonatomic) _Bool disallowsAMRAudio;
@property(readonly, nonatomic) _Bool currentItemIsRental;
- (void)beginUsingVideoLayer;
- (void)contentInvalidatedWithCurrentItemMovedToIndex:(unsigned long long)arg1;
- (void)contentInvalidated;
- (void)contentsDidChangeByRemovingRange:(struct _NSRange)arg1;
@property(readonly, nonatomic) MPQueuePlayer *avPlayer;
- (void)applyShuffleSettings;
- (void)applyRepeatSettings;
- (unsigned long long)_updateSubsequenceFocus;
- (void)applicationWillTerminate;
- (void)applicationDidReceiveMemoryWarningAsUrgent:(_Bool)arg1;
- (void)enableAutoplayForCurrentItem;
- (void)disableAutoplayForCurrentItem;
@property(readonly, nonatomic) _Bool isCurrentItemReady;
@property(nonatomic) _Bool useApplicationAudioSession;
@property(readonly, nonatomic) MPAudioDeviceController *audioDeviceController; // @synthesize audioDeviceController=_audioDeviceController;
@property(nonatomic) _Bool stopAtEnd;
@property(nonatomic) int playbackMode;
@property(readonly, nonatomic, getter=isFullScreenVideoMode) _Bool fullScreenVideoMode;
@property(readonly, nonatomic) NSString *routeNameForVolumeControl;
@property(readonly, nonatomic) _Bool muted;
@property(nonatomic) float volume;
@property(readonly, nonatomic) _Bool hasVolumeControl;
@property(nonatomic) unsigned long long shuffleType;
@property(nonatomic) unsigned long long repeatType;
- (_Bool)_setRate:(float)arg1 forScanning:(_Bool)arg2;
- (_Bool)setRate:(float)arg1;
@property(nonatomic) _Bool closedCaptioningEnabled;
@property(nonatomic) _Bool disableAirPlayMirroringDuringPlayback;
- (float)rate;
@property(readonly, nonatomic) unsigned long long numberOfItems;
@property(nonatomic) _Bool alwaysPlayWheneverPossible;
@property(readonly, nonatomic, getter=isValid) _Bool valid;
@property(readonly, nonatomic, getter=isShuffled) _Bool shuffled;
- (_Bool)shouldDisplayAsPlaying;
@property(readonly, nonatomic, getter=isPlaying) _Bool playing;
@property(readonly, nonatomic) _Bool isExternalPlaybackActive;
- (unsigned long long)_seeklessStateForState:(unsigned long long)arg1;
- (_Bool)_showsPlayingWhenInState:(unsigned long long)arg1;
@property(readonly, nonatomic) MPMediaQuery *currentMediaQuery;
@property(readonly, nonatomic) MPMediaItem *currentMediaItem;
@property(readonly, nonatomic) MPAVItem *currentItem;
@property(readonly, nonatomic) unsigned long long bufferingState; // @synthesize bufferingState=_bufferingState;
@property(nonatomic) _Bool autoPlayWhenLikelyToKeepUp;
- (void)setClient:(id)arg1 wantsToAllowAirPlayVideo:(_Bool)arg2;
- (_Bool)allowsExternalPlayback;
@property(readonly, nonatomic) unsigned long long activeShuffleType;
@property(readonly, nonatomic) unsigned long long activeRepeatType;
- (_Bool)isTickTimerEnabled;
- (void)endTickTimer;
- (void)beginTickTimerWithInterval:(double)arg1;
- (_Bool)forceRestartPlaybackIfNecessary;
- (void)togglePlayback;
@property(nonatomic) double currentTime;
- (void)playChapterTimeMarkerAtIndex:(unsigned long long)arg1;
- (void)playItemAtIndex:(unsigned long long)arg1 forceRestart:(_Bool)arg2;
- (void)playItemAtIndex:(unsigned long long)arg1;
- (void)play;
- (void)pause;
- (void)pauseWithFadeout:(float)arg1;
- (void)disconnectPlaylistManagerForTeardown;
- (void)endPlayback;
@property(readonly, nonatomic) double currentMonotonousTime;
- (double)currentTimeForBookmarking;
@property(readonly, nonatomic, getter=isRewindHoldingAtStart) _Bool rewindHoldingAtStart;
- (_Bool)isSeekingOrScrubbing;
- (_Bool)fadeOutForQuit;
- (void)endSeek;
- (_Bool)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(_Bool)arg3 allowSkippingAds:(_Bool)arg4 error:(id *)arg5;
- (void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(_Bool)arg3 allowSkippingAds:(_Bool)arg4;
- (void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2 ignoreElapsedTime:(_Bool)arg3;
- (void)changePlaybackIndexBy:(long long)arg1 deltaType:(int)arg2;
- (void)changePlaybackIndexBy:(long long)arg1;
- (void)setPlaybackIndex:(long long)arg1;
- (void)setPlaybackIndex:(long long)arg1 selectionDirection:(long long)arg2;
- (void)_setAVControllerQueueFeeder:(id)arg1 startQueueIndex:(unsigned long long)arg2;
- (void)_clearLastSetTimeIfPlayerTimeIsValid;
- (void)_updateCurrentTimeToNextStartTimeForQueueFeeder:(id)arg1 withItemIndex:(long long)arg2;
- (void)beginSeek:(int)arg1;
- (void)dealloc;
- (id)init;

@end

