/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "NSCopying-Protocol.h"
#import "NSSecureCoding-Protocol.h"

@class NSArray, NSDictionary, NSHTTPCookieStorage, NSString, NSURLCache, NSURLCredentialStorage;

// Not exported
@interface __NSCFURLSessionConfiguration : NSObject <NSCopying, NSSecureCoding>
{
    struct __CFURLStorageSession *_legacyStorageSystem;
    _Bool _backgroundSession;
    _Bool _allowsCellularAccess;
    _Bool _discretionary;
    _Bool _sessionSendsLaunchEvents;
    _Bool _HTTPShouldUsePipelining;
    _Bool _HTTPShouldSetCookies;
    _Bool __credStorageSet;
    _Bool __urlCacheSet;
    _Bool __cookieStorageSet;
    _Bool _tasks_created_suspended;
    _Bool _skip_download_unlink;
    _Bool __preventsIdleSleep;
    _Bool __usePipeliningHeuristics;
    _Bool __startSynchronously;
    int _TLSMinimumSupportedProtocol;
    int _TLSMaximumSupportedProtocol;
    NSString *_identifier;
    unsigned long long _requestCachePolicy;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
    unsigned long long _networkServiceType;
    NSDictionary *_connectionProxyDictionary;
    unsigned long long _HTTPCookieAcceptPolicy;
    NSDictionary *_HTTPAdditionalHeaders;
    long long _HTTPMaximumConnectionsPerHost;
    NSArray *_protocolClasses;
    NSURLCredentialStorage *__credStorage;
    NSURLCache *__urlCache;
    NSHTTPCookieStorage *__cookieStorage;
    NSString *_disposition;
    struct _CFHSTSPolicy *_HSTSPolicy;
    double _connectionCachePurgeTimeout;
    double _connectionCacheCellPurgeTimeout;
    NSDictionary *__cfurlConnectionProperties;
    NSDictionary *__socketStreamProperties;
    NSArray *__contentDispHeadEncFallback;
}

+ (_Bool)supportsSecureCoding;
+ (id)backgroundSessionConfiguration:(id)arg1;
+ (id)ephemeralSessionConfiguration;
+ (id)defaultSessionConfiguration;
@property(copy) NSArray *_contentDispHeadEncFallback; // @synthesize _contentDispHeadEncFallback=__contentDispHeadEncFallback;
@property _Bool _startSynchronously; // @synthesize _startSynchronously=__startSynchronously;
@property _Bool _usePipeliningHeuristics; // @synthesize _usePipeliningHeuristics=__usePipeliningHeuristics;
@property _Bool _preventsIdleSleep; // @synthesize _preventsIdleSleep=__preventsIdleSleep;
@property(copy) NSDictionary *_socketStreamProperties; // @synthesize _socketStreamProperties=__socketStreamProperties;
@property(copy) NSDictionary *_cfurlConnectionProperties; // @synthesize _cfurlConnectionProperties=__cfurlConnectionProperties;
@property _Bool skip_download_unlink; // @synthesize skip_download_unlink=_skip_download_unlink;
@property _Bool tasks_created_suspended; // @synthesize tasks_created_suspended=_tasks_created_suspended;
@property double connectionCacheCellPurgeTimeout; // @synthesize connectionCacheCellPurgeTimeout=_connectionCacheCellPurgeTimeout;
@property double connectionCachePurgeTimeout; // @synthesize connectionCachePurgeTimeout=_connectionCachePurgeTimeout;
@property(retain) struct _CFHSTSPolicy *HSTSPolicy; // @synthesize HSTSPolicy=_HSTSPolicy;
@property NSString *disposition; // @synthesize disposition=_disposition;
@property _Bool _cookieStorageSet; // @synthesize _cookieStorageSet=__cookieStorageSet;
@property(retain) NSHTTPCookieStorage *_cookieStorage; // @synthesize _cookieStorage=__cookieStorage;
@property _Bool _urlCacheSet; // @synthesize _urlCacheSet=__urlCacheSet;
@property(retain) NSURLCache *_urlCache; // @synthesize _urlCache=__urlCache;
@property _Bool _credStorageSet; // @synthesize _credStorageSet=__credStorageSet;
@property(retain) NSURLCredentialStorage *_credStorage; // @synthesize _credStorage=__credStorage;
@property(copy) NSArray *protocolClasses; // @synthesize protocolClasses=_protocolClasses;
@property long long HTTPMaximumConnectionsPerHost; // @synthesize HTTPMaximumConnectionsPerHost=_HTTPMaximumConnectionsPerHost;
@property(copy) NSDictionary *HTTPAdditionalHeaders; // @synthesize HTTPAdditionalHeaders=_HTTPAdditionalHeaders;
@property unsigned long long HTTPCookieAcceptPolicy; // @synthesize HTTPCookieAcceptPolicy=_HTTPCookieAcceptPolicy;
@property _Bool HTTPShouldSetCookies; // @synthesize HTTPShouldSetCookies=_HTTPShouldSetCookies;
@property _Bool HTTPShouldUsePipelining; // @synthesize HTTPShouldUsePipelining=_HTTPShouldUsePipelining;
@property int TLSMaximumSupportedProtocol; // @synthesize TLSMaximumSupportedProtocol=_TLSMaximumSupportedProtocol;
@property int TLSMinimumSupportedProtocol; // @synthesize TLSMinimumSupportedProtocol=_TLSMinimumSupportedProtocol;
@property(copy) NSDictionary *connectionProxyDictionary; // @synthesize connectionProxyDictionary=_connectionProxyDictionary;
@property _Bool sessionSendsLaunchEvents; // @synthesize sessionSendsLaunchEvents=_sessionSendsLaunchEvents;
@property(getter=isDiscretionary) _Bool discretionary; // @synthesize discretionary=_discretionary;
@property _Bool allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property unsigned long long networkServiceType; // @synthesize networkServiceType=_networkServiceType;
@property double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property double timeoutIntervalForRequest; // @synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest;
@property unsigned long long requestCachePolicy; // @synthesize requestCachePolicy=_requestCachePolicy;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(getter=isBackgroundSession) _Bool backgroundSession; // @synthesize backgroundSession=_backgroundSession;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(retain, getter=URLCredentialStorage, setter=setURLCredentialStorage:) NSURLCredentialStorage *URLCredentialStorage;
@property(retain, getter=URLCache, setter=setURLCache:) NSURLCache *URLCache;
@property(retain, getter=HTTPCookieStorage, setter=setHTTPCookieStorage:) NSHTTPCookieStorage *HTTPCookieStorage;
- (id)initWithDisposition:(id)arg1;

@end

