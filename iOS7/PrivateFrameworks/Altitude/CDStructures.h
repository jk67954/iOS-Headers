/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct BitField<unsigned int> {
    unsigned int mField;
};

struct CGSize {
    double width;
    double height;
};

struct Context;

struct GeoResourceManager {
    void **_field1;
    struct ReflectionBase *_field2;
    struct BitField<unsigned int> _field3;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    struct Context *_field6;
    _Bool _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
    _Bool _field13;
    struct KaroMapImp<std::__1::basic_string<char>, karo::Node::InputSlot, std::__1::less<std::__1::basic_string<char>>> _field14;
    struct KaroArrayImp<karo::Node *> _field15;
    struct BitField<unsigned int> _field16;
    struct ToggleMutex _field17;
    struct ManifestManager *_field18;
    struct GeoResourceObserverWrapper *_field19;
};

struct GeoResourceObserverWrapper;

struct GeoServicesLoadJob;

struct InputSlot {
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field1;
    struct Rtti *_field2;
    struct Node *_field3;
    struct KaroArrayImp<karo::Node *> _field4;
    _Bool _field5;
    struct BitField<unsigned int> _field6;
};

struct KaroArrayImp<karo::Node *> {
    void **_field1;
    struct ReflectionBase *_field2;
    struct BitField<unsigned int> _field3;
    unsigned int _field4;
    struct vector<karo::Node *, std::__1::allocator<karo::Node *>> _field5;
    unsigned int _field6;
};

struct KaroMapImp<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp> {
    void **_vptr$ReflectionInterface;
    struct ReflectionBase *mPartOf;
    struct BitField<unsigned int> mFlags;
    unsigned int mMappingsCount;
    struct _GEOTileKey mDefaultKey;
    shared_ptr_3813db34 mDefaultValue;
    unsigned int mT0Flags;
    unsigned int mT1Flags;
    struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> mMap;
};

struct KaroMapImp<std::__1::basic_string<char>, karo::Node::InputSlot, std::__1::less<std::__1::basic_string<char>>> {
    void **_field1;
    struct ReflectionBase *_field2;
    struct BitField<unsigned int> _field3;
    unsigned int _field4;
    struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> _field5;
    struct InputSlot _field6;
    unsigned int _field7;
    unsigned int _field8;
    struct map<std::__1::basic_string<char>, karo::Node::InputSlot, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, karo::Node::InputSlot>>> _field9;
};

struct ManifestManager;

struct Mutex {
    void *mMutex;
};

struct Node;

struct ReflectionBase;

struct Rtti;

struct ToggleMutex {
    void *_field1;
    _Bool _field2;
};

struct _GEOTileKey {
    unsigned int z:6;
    unsigned int x:26;
    unsigned int y:26;
    unsigned int type:6;
    unsigned int pixelSize:8;
    unsigned int textScale:8;
    unsigned int provider:8;
    unsigned int expires:1;
    unsigned int reserved1:7;
    unsigned char reserved2[4];
};

struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
    struct __tree_node_base<void *> *__left_;
};

struct basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>> {
    struct __compressed_pair<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char>>::__rep, std::__1::allocator<char>> {
        struct __rep {
            union {
                struct __long {
                    char *_field1;
                    unsigned long long _field2;
                    unsigned long long _field3;
                } _field1;
                struct __short {
                    char _field1[23];
                    struct {
                        unsigned char _field1;
                    } _field2;
                } _field2;
                struct __raw {
                    unsigned long long _field1[3];
                } _field3;
            } _field1;
        } _field1;
    } _field1;
};

struct map<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, std::__1::allocator<std::__1::pair<const _GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
    struct __tree<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true>, std::__1::allocator<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>>> {
        struct __tree_node<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<_GEOTileKey, std::__1::shared_ptr<altitude::GeoServicesLoadJob>, GEOTileKeyComp, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct map<std::__1::basic_string<char>, karo::Node::InputSlot, std::__1::less<std::__1::basic_string<char>>, std::__1::allocator<std::__1::pair<const std::__1::basic_string<char>, karo::Node::InputSlot>>> {
    struct __tree<std::__1::pair<std::__1::basic_string<char>, karo::Node::InputSlot>, std::__1::__map_value_compare<std::__1::basic_string<char>, karo::Node::InputSlot, std::__1::less<std::__1::basic_string<char>>, true>, std::__1::allocator<std::__1::pair<std::__1::basic_string<char>, karo::Node::InputSlot>>> {
        struct __tree_node<std::__1::pair<std::__1::basic_string<char>, karo::Node::InputSlot>, void *> *_field1;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<std::__1::basic_string<char>, karo::Node::InputSlot>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<std::__1::basic_string<char>, karo::Node::InputSlot, std::__1::less<std::__1::basic_string<char>>, true>> {
            unsigned long long _field1;
        } _field3;
    } _field1;
};

struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *__ptr_;
    struct __shared_weak_count *__cntrl_;
};

struct vector<karo::Node *, std::__1::allocator<karo::Node *>> {
    struct Node **_field1;
    struct Node **_field2;
    struct __compressed_pair<karo::Node **, std::__1::allocator<karo::Node *>> {
        struct Node **_field1;
    } _field3;
};

#pragma mark Typedef'd Structures

typedef struct {
    void *opaque1;
    long long opaque2;
} CDStruct_7d855afc;

// Template types
typedef struct shared_ptr<altitude::GeoServicesLoadJob> {
    struct GeoServicesLoadJob *__ptr_;
    struct __shared_weak_count *__cntrl_;
} shared_ptr_3813db34;

