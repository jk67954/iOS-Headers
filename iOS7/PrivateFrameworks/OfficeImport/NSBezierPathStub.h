/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

#import "NSCopying-Protocol.h"

// Not exported
@interface NSBezierPathStub : NSObject <NSCopying>
{
    long long _segmentCount;
    long long _segmentMax;
    struct PATHSEGMENT {
        unsigned char;
        struct CGPoint;
    } *_head;
    long long _lastSubpathIndex;
    long long _elementCount;
    double _lineWidth;
    struct CGRect _controlPointBounds;
    double _miterLimit;
    double _flatness;
    double *_dashedLinePattern;
    unsigned long long _dashedLineCount;
    double _dashedLinePhase;
    void *_path;
    id _private[4];
    struct {
        unsigned int _flags:8;
        unsigned int _pathState:2;
        unsigned int _unused:22;
    } _bpFlags;
}

+ (void)drawString:(id)arg1 atPoint:(struct CGPoint)arg2 withFontName:(id)arg3 andHeight:(float)arg4 color:(id)arg5 alignToTop:(_Bool)arg6 currentTransformStruct:(CDStruct_8727d297)arg7;
+ (double)defaultLineWidth;
+ (void)setDefaultLineWidth:(double)arg1;
+ (unsigned long long)defaultLineJoinStyle;
+ (void)setDefaultLineJoinStyle:(unsigned long long)arg1;
+ (unsigned long long)defaultLineCapStyle;
+ (void)setDefaultLineCapStyle:(unsigned long long)arg1;
+ (unsigned long long)defaultWindingRule;
+ (void)setDefaultWindingRule:(unsigned long long)arg1;
+ (double)defaultFlatness;
+ (void)setDefaultFlatness:(double)arg1;
+ (double)defaultMiterLimit;
+ (void)setDefaultMiterLimit:(double)arg1;
+ (void)drawPackedGlyphs:(const char *)arg1 atPoint:(struct CGPoint)arg2;
+ (void)strokeLineFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2;
+ (void)clipRect:(struct CGRect)arg1;
+ (void)strokeRect:(struct CGRect)arg1;
+ (void)fillRect:(struct CGRect)arg1;
+ (id)bezierPathWithRoundedRect:(struct CGRect)arg1 xRadius:(double)arg2 yRadius:(double)arg3;
+ (id)bezierPathWithOvalInRect:(struct CGRect)arg1;
+ (id)bezierPathWithRect:(struct CGRect)arg1;
+ (id)bezierPath;
+ (struct CGContext *)currentCGContext;
+ (void)setCurrentCGContext:(struct CGContext *)arg1;
+ (void)initialize;
- (id).cxx_construct;
- (void)setCachesBezierPath:(_Bool)arg1;
- (_Bool)cachesBezierPath;
- (_Bool)isStrokeHitByPath:(id)arg1;
- (_Bool)isStrokeHitByRect:(struct CGRect)arg1;
- (_Bool)isStrokeHitByPoint:(struct CGPoint)arg1;
- (_Bool)isHitByPath:(id)arg1;
- (_Bool)isHitByRect:(struct CGRect)arg1;
- (_Bool)isHitByPoint:(struct CGPoint)arg1;
- (_Bool)containsPoint:(struct CGPoint)arg1;
- (int)_locationOfPoint:(struct CGPoint)arg1;
- (void)appendBezierPathWithRoundedRect:(struct CGRect)arg1 xRadius:(double)arg2 yRadius:(double)arg3;
- (void)appendBezierPathWithArcFromPoint:(struct CGPoint)arg1 toPoint:(struct CGPoint)arg2 radius:(double)arg3;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4;
- (void)appendBezierPathWithArcWithCenter:(struct CGPoint)arg1 radius:(double)arg2 startAngle:(double)arg3 endAngle:(double)arg4 clockwise:(_Bool)arg5;
- (void)_appendArcSegmentWithCenter:(struct CGPoint)arg1 radius:(double)arg2 angle1:(double)arg3 angle2:(double)arg4;
- (void)appendBezierPathWithOvalInRect:(struct CGRect)arg1;
- (void)appendBezierPathWithPoints:(struct CGPoint *)arg1 count:(long long)arg2;
- (void)appendBezierPathWithRect:(struct CGRect)arg1;
- (void)appendBezierPath:(id)arg1;
- (void)setAssociatedPoints:(struct CGPoint *)arg1 atIndex:(long long)arg2;
- (unsigned long long)elementAtIndex:(long long)arg1 associatedPoints:(struct CGPoint *)arg2;
- (long long)_segmentIndexForElementIndex:(long long)arg1;
- (unsigned long long)elementAtIndex:(long long)arg1;
- (long long)elementCount;
- (struct CGRect)bounds;
- (struct CGRect)controlPointBounds;
- (struct CGPoint)currentPoint;
- (_Bool)isEmpty;
- (void)transformUsingAffineTransform:(id)arg1;
- (id)bezierPathByReversingPath;
- (id)_copyFlattenedPath;
- (id)bezierPathByFlatteningPath;
- (void)flattenIntoPath:(id)arg1;
- (void)subdivideBezierWithFlatness:(double)arg1 startPoint:(struct CGPoint)arg2 controlPoint1:(struct CGPoint)arg3 controlPoint2:(struct CGPoint)arg4 endPoint:(struct CGPoint)arg5;
- (void)setClip;
- (void)addClip;
- (void)fill;
- (void)stroke;
- (void)_doPath;
- (void)getLineDash:(double *)arg1 count:(long long *)arg2 phase:(double *)arg3;
- (void)setLineDash:(const double *)arg1 count:(long long)arg2 phase:(double)arg3;
- (void)setFlatness:(double)arg1;
- (double)flatness;
- (void)setMiterLimit:(double)arg1;
- (double)miterLimit;
- (void)setWindingRule:(unsigned long long)arg1;
- (unsigned long long)windingRule;
- (void)setLineJoinStyle:(unsigned long long)arg1;
- (unsigned long long)lineJoinStyle;
- (void)setLineCapStyle:(unsigned long long)arg1;
- (unsigned long long)lineCapStyle;
- (void)setLineWidth:(double)arg1;
- (double)lineWidth;
- (void)relativeCurveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;
- (void)relativeLineToPoint:(struct CGPoint)arg1;
- (void)relativeMoveToPoint:(struct CGPoint)arg1;
- (void)removeAllPoints;
- (void)closePath;
- (void)curveToPoint:(struct CGPoint)arg1 controlPoint1:(struct CGPoint)arg2 controlPoint2:(struct CGPoint)arg3;
- (void)lineToPoint:(struct CGPoint)arg1;
- (void)moveToPoint:(struct CGPoint)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
- (void)finalize;
- (void)dealloc;
- (id)init;

@end

