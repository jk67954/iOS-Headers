/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#import "NSObject.h"

@class ACAccount, DAStatusReport, DATaskManager, NSArray, NSData, NSMutableDictionary, NSString, NSURL;

@interface DAAccount : NSObject
{
    ACAccount *_backingAccountInfo;
    _Bool _hasInitted;
    _Bool _shouldPromptForPassword;
    _Bool _shouldUseOpportunisticSockets;
    _Bool _wasUserInitiated;
    NSMutableDictionary *_haveWarnedAboutCertDict;
    DAStatusReport *_statusReport;
    struct __CFDictionary *_consumers;
    struct __CFURLStorageSession *_storageSession;
    DATaskManager *_taskManager;
    NSString *_clientToken;
    _Bool _shouldFailAllTasks;
    _Bool _isValidating;
    NSArray *_appIdsForPasswordPrompt;
    NSMutableDictionary *_dataclassPropertyURLsByDataclass;
}

+ (id)daAccountSubclassWithBackingAccountInfo:(id)arg1;
@property(retain, nonatomic) NSMutableDictionary *dataclassPropertyURLsByDataclass; // @synthesize dataclassPropertyURLsByDataclass=_dataclassPropertyURLsByDataclass;
@property(nonatomic) _Bool isValidating; // @synthesize isValidating=_isValidating;
@property(readonly) NSArray *appIdsForPasswordPrompt; // @synthesize appIdsForPasswordPrompt=_appIdsForPasswordPrompt;
@property(readonly, nonatomic) DATaskManager *taskManager; // @synthesize taskManager=_taskManager;
@property _Bool wasUserInitiated; // @synthesize wasUserInitiated=_wasUserInitiated;
@property _Bool shouldUseOpportunisticSockets; // @synthesize shouldUseOpportunisticSockets=_shouldUseOpportunisticSockets;
@property(retain) DAStatusReport *statusReport; // @synthesize statusReport=_statusReport;
@property(readonly) ACAccount *backingAccountInfo; // @synthesize backingAccountInfo=_backingAccountInfo;
@property _Bool shouldPromptForPassword; // @synthesize shouldPromptForPassword=_shouldPromptForPassword;
- (void)reload;
- (void)shutdown;
- (id)description;
- (struct __CFURLStorageSession *)copyStorageSession;
- (_Bool)isSubscribedCalendarAccount;
- (_Bool)isGoogleAccount;
- (_Bool)isHotmailAccount;
- (_Bool)isCalDAVChildAccount;
- (_Bool)isCardDAVAccount;
- (_Bool)isCalDAVAccount;
- (_Bool)isBookmarkDAVAccount;
- (_Bool)isLDAPAccount;
- (_Bool)isActiveSyncAccount;
- (_Bool)accountHasSignificantPropertyChangesFromOldAccountInfo:(id)arg1;
- (_Bool)isEqualToAccount:(id)arg1;
@property(readonly, nonatomic) _Bool shouldFailAllTasks; // @synthesize shouldFailAllTasks=_shouldFailAllTasks;
- (void)resetStatusReport;
- (_Bool)resetCertWarnings;
- (void)setHaveWarnedAboutCert:(id)arg1 forHost:(id)arg2;
- (_Bool)haveWarnedAboutCert:(id)arg1 forHost:(id)arg2;
@property(readonly) _Bool isChildAccount;
- (void)cleanupAccountFiles;
- (void)setExceptions:(struct __CFData *)arg1 forDigest:(id)arg2;
- (struct __CFData *)exceptionsForDigest:(id)arg1;
- (id)_exceptionsDict;
- (_Bool)_isIdentityManagedByProfile;
- (void)setIdentityCertificatePersistentID:(id)arg1 managedByProfile:(_Bool)arg2;
@property(readonly) NSData *identityPersist;
- (id)addUsernameToURL:(id)arg1;
@property(readonly) int keychainAccessibilityType;
- (void)saveAccountProperties;
- (void)saveAccountPropertiesWithCompletionHandler:(id)arg1;
- (void)removeClientCertificateData;
- (id)defaultContainerIdentifierForDADataclass:(int)arg1;
- (void)stopMonitoringFolders;
- (void)stopMonitoringFoldersWithIDs:(id)arg1;
- (_Bool)monitorFolderWithID:(id)arg1;
- (_Bool)monitorFoldersWithIDs:(id)arg1;
- (void)tearDown;
- (id)oauthInfoProvider;
- (id)oauth2Token;
- (id)customConnectionProperties;
- (id)additionalHeaderValues;
- (void)accountDidChangeFromOldAccountInfo:(id)arg1;
- (void)removeDBSyncData;
- (_Bool)shouldRemoveDBSyncDataOnAccountChange;
- (id)onBehalfOfBundleIdentifier;
@property(readonly) _Bool shouldAutodiscoverAccountProperties;
@property _Bool shouldDoInitialAutodiscovery;
- (_Bool)autodiscoverAccountConfigurationWithConsumer:(id)arg1;
- (void)discoverInitialPropertiesWithConsumer:(id)arg1;
- (_Bool)saveModifiedPropertiesOnBackingAccount;
- (void)checkValidityOnAccountStore:(id)arg1 withConsumer:(id)arg2;
@property(copy) NSURL *principalURL;
@property(readonly) NSString *scheme;
@property(copy) NSString *principalPath;
@property long long port;
@property(retain) NSData *encryptionIdentityPersistentReference;
@property(retain) NSData *signingIdentityPersistentReference;
- (_Bool)accountContainsEmailAddress:(id)arg1;
@property(copy) NSArray *emailAddresses;
@property(copy) NSString *emailAddress;
@property _Bool useSSL;
@property(copy) NSString *host;
- (id)domainOnly;
- (id)usernameWithoutDomain;
- (long long)portFromDataclassPropertiesForDataclass:(id)arg1;
- (_Bool)useSSLFromDataclassPropertiesForDataclass:(id)arg1;
- (id)hostFromDataclassPropertiesForDataclass:(id)arg1;
- (id)urlFromDataclassPropertiesForDataclass:(id)arg1;
@property(copy) NSString *password;
- (id)passwordWithExpected:(_Bool)arg1;
- (void)clientTokenRequestedByServer;
@property(readonly) NSString *clientToken;
- (void)removeConsumerForTask:(id)arg1;
- (id)consumerForTask:(id)arg1;
- (void)setConsumer:(id)arg1 forTask:(id)arg2;
- (id)stateString;
- (void)stopMonitoringFolderWithID:(id)arg1;
- (void)suspendMonitoringFoldersWithIDs:(id)arg1;
- (void)resumeMonitoringFoldersWithIDs:(id)arg1;
- (void)setAccountIntProperty:(int)arg1 forKey:(id)arg2;
- (int)accountIntPropertyForKey:(id)arg1;
- (void)setAccountBoolProperty:(_Bool)arg1 forKey:(id)arg2;
- (_Bool)accountBoolPropertyForKey:(id)arg1;
- (void)removeAccountPropertyForKey:(id)arg1;
- (void)setAccountProperty:(id)arg1 forKey:(id)arg2;
- (id)accountPropertyForKey:(id)arg1;
- (id)spinnerIdentifiers;
- (id)dataclassProperties;
@property(readonly) int enabledDataclassesBitmask;
- (void)setEnabled:(_Bool)arg1 forDADataclass:(int)arg2;
- (_Bool)enabledForDADataclass:(int)arg1;
- (_Bool)enabledForAnyDADataclasses:(int)arg1;
- (void)setEnabled:(_Bool)arg1 forDataclass:(id)arg2;
- (_Bool)isEnabledForDataclass:(id)arg1;
- (_Bool)isDisabled;
@property(copy) NSString *user;
@property(copy) NSString *username;
- (id)displayName;
@property(copy) NSString *accountDescription;
- (void)_setPersistentUUID:(id)arg1;
@property(readonly) NSString *persistentUUID;
@property(readonly, nonatomic) NSString *scheduleIdentifier;
- (id)syncStoreIdentifier;
- (id)accountID;
- (void)resetAccountID;
- (_Bool)upgradeAccount;
@property(setter=setDAAccountVersion:) int daAccountVersion;
- (void)ingestBackingAccountInfoProperties;
- (id)initWithBackingAccountInfo:(id)arg1;
- (void)dealloc;

@end

