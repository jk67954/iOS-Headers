/*
 *     Generated by class-dump 3.3.4 (64 bit).
 *
 *     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2011 by Steve Nygard.
 */

#pragma mark Named Structures

struct CGPoint {
    double _field1;
    double _field2;
};

struct CGRect {
    struct CGPoint _field1;
    struct CGSize _field2;
};

struct CGSize {
    double _field1;
    double _field2;
};

struct MLArtworkFormatSpec {
    unsigned int _field1;
    unsigned int _field2;
    unsigned int _field3;
    unsigned int _field4;
    int _field5;
    int _field6;
    _Bool _field7;
};

struct MLArtworkInstanceInfo {
    struct MLArtworkFormatSpec _field1;
    struct CGRect _field2;
};

struct MLRowDataSource;

struct NSNumber {
    Class _field1;
};

struct _NSRange {
    unsigned long long location;
    unsigned long long length;
};

struct __hash_node<long long, void *>;

struct __hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>;

struct __hash_node<std::__1::pair<long long, ML3NameOrder>, void *>;

struct __hash_node<std::__1::pair<long long, NSString *>, void *>;

struct map<unsigned int, unsigned long, std::__1::less<unsigned int>, std::__1::allocator<std::__1::pair<const unsigned int, unsigned long>>> {
    struct __tree<std::__1::pair<unsigned int, unsigned long>, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true>, std::__1::allocator<std::__1::pair<unsigned int, unsigned long>>> {
        struct __tree_node<std::__1::pair<unsigned int, unsigned long>, void *> *__begin_node_;
        struct __compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *>*>, std::__1::allocator<std::__1::__tree_node<std::__1::pair<unsigned int, unsigned long>, void *>>> {
            struct __tree_end_node<std::__1::__tree_node_base<void *>*> {
                struct __tree_node_base<void *> *__left_;
            } __first_;
        } __pair1_;
        struct __compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned int, unsigned long, std::__1::less<unsigned int>, true>> {
            unsigned long long __first_;
        } __pair3_;
    } __tree_;
};

struct sqlite3_module {
    int _field1;
    void *_field2;
    void *_field3;
    void *_field4;
    void *_field5;
    void *_field6;
    void *_field7;
    void *_field8;
    void *_field9;
    void *_field10;
    void *_field11;
    void *_field12;
    void *_field13;
    void *_field14;
    void *_field15;
    void *_field16;
    void *_field17;
    void *_field18;
    void *_field19;
    void *_field20;
    void *_field21;
    void *_field22;
    void *_field23;
};

struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<long long, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> {
        struct __hash_node<long long, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<long long, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*>>> {
        struct __hash_node<std::__1::pair<long long, CollectionPIDSet>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>>> {
        struct __hash_node<std::__1::pair<long long, ML3NameOrder>, void *> **_field1;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>> {
                unsigned long long _field1;
            } _field1;
        } _field2;
    } _field1;
};

struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*>>> {
    struct __compressed_pair<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>**, std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*>>> {
        struct __hash_node<std::__1::pair<long long, NSString *>, void *> **__first_;
        struct __bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*>> {
            struct __compressed_pair<unsigned long, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*>> {
                unsigned long long __first_;
            } __data_;
        } __second_;
    } __ptr_;
};

struct unordered_map<long long, CollectionPIDSet, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, CollectionPIDSet>>> {
    struct __hash_table<std::__1::pair<long long, CollectionPIDSet>, std::__1::__unordered_map_hasher<long long, CollectionPIDSet, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, CollectionPIDSet, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, CollectionPIDSet>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<long long, CollectionPIDSet>, void *>*> {
                struct __hash_node<std::__1::pair<long long, CollectionPIDSet>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, CollectionPIDSet, std::__1::hash<long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, CollectionPIDSet, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_map<long long, ML3NameOrder, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3NameOrder>>> {
    struct __hash_table<std::__1::pair<long long, ML3NameOrder>, std::__1::__unordered_map_hasher<long long, ML3NameOrder, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, ML3NameOrder, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, ML3NameOrder>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*> {
                struct __hash_node<std::__1::pair<long long, ML3NameOrder>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, ML3NameOrder, std::__1::hash<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, ML3NameOrder, std::__1::equal_to<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
};

struct unordered_map<long long, NSString *, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, NSString *>>> {
    struct __hash_table<std::__1::pair<long long, NSString *>, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, NSString *>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<long long, NSString *>, void *>*> {
                struct __hash_node<std::__1::pair<long long, NSString *>, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, NSString *, std::__1::hash<long long>, true>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, NSString *, std::__1::equal_to<long long>, true>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
    struct __hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
        struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *>*>, std::__1::allocator<std::__1::__hash_node<long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<long long, void *>*> {
                struct __hash_node<long long, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<long long>> {
            float __first_;
        } __p3_;
    } __table_;
};

struct vector<MLRowDataSource *, std::__1::allocator<MLRowDataSource *>> {
    struct MLRowDataSource **__begin_;
    struct MLRowDataSource **__end_;
    struct __compressed_pair<MLRowDataSource **, std::__1::allocator<MLRowDataSource *>> {
        struct MLRowDataSource **__first_;
    } __end_cap_;
};

struct vector<long long, std::__1::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *__first_;
    } __end_cap_;
};

struct vector<unsigned char, std::__1::allocator<unsigned char>> {
    char *__begin_;
    char *__end_;
    struct __compressed_pair<unsigned char *, std::__1::allocator<unsigned char>> {
        char *__first_;
    } __end_cap_;
};

#pragma mark Typedef'd Structures

typedef struct {
    _Bool _field1;
    unsigned int _field2;
} CDStruct_06d3d77b;

typedef struct {
    unsigned int _field1;
    char *_field2;
    unsigned int _field3;
    unsigned long long _field4;
    unsigned long long _field5;
    unsigned int _field6;
    long long _field7;
    _Bool _field8;
    _Bool _field9;
    _Bool _field10;
    _Bool _field11;
    _Bool _field12;
} CDStruct_ce55d3fc;

typedef struct {
    long long _field1;
    long long _field2;
    long long _field3;
    long long _field4;
    long long _field5;
    long long _field6;
    long long _field7;
} CDStruct_bd6d074e;

typedef struct {
    long long _field1;
    long long _field2;
} CDStruct_912cb5d2;

// Template types
typedef struct unordered_map<long long, ML3NameOrder, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<std::__1::pair<const long long, ML3NameOrder>>> {
    struct __hash_table<std::__1::pair<long long, ML3NameOrder>, std::__1::__unordered_map_hasher<long long, ML3NameOrder, std::__1::hash<long long>, true>, std::__1::__unordered_map_equal<long long, ML3NameOrder, std::__1::equal_to<long long>, true>, std::__1::allocator<std::__1::pair<long long, ML3NameOrder>>> {
        struct unique_ptr<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>>> _field1;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*>, std::__1::allocator<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<std::__1::pair<long long, ML3NameOrder>, void *>*> {
                struct __hash_node<std::__1::pair<long long, ML3NameOrder>, void *> *_field1;
            } _field1;
        } _field2;
        struct __compressed_pair<unsigned long, std::__1::__unordered_map_hasher<long long, ML3NameOrder, std::__1::hash<long long>, true>> {
            unsigned long long _field1;
        } _field3;
        struct __compressed_pair<float, std::__1::__unordered_map_equal<long long, ML3NameOrder, std::__1::equal_to<long long>, true>> {
            float _field1;
        } _field4;
    } _field1;
} unordered_map_d5cf956c;

typedef struct unordered_set<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
    struct __hash_table<long long, std::__1::hash<long long>, std::__1::equal_to<long long>, std::__1::allocator<long long>> {
        struct unique_ptr<std::__1::__hash_node<long long, void *>*[], std::__1::__bucket_list_deallocator<std::__1::allocator<std::__1::__hash_node<long long, void *>*>>> __bucket_list_;
        struct __compressed_pair<std::__1::__hash_node_base<std::__1::__hash_node<long long, void *>*>, std::__1::allocator<std::__1::__hash_node<long long, void *>>> {
            struct __hash_node_base<std::__1::__hash_node<long long, void *>*> {
                struct __hash_node<long long, void *> *__next_;
            } __first_;
        } __p1_;
        struct __compressed_pair<unsigned long, std::__1::hash<long long>> {
            unsigned long long __first_;
        } __p2_;
        struct __compressed_pair<float, std::__1::equal_to<long long>> {
            float __first_;
        } __p3_;
    } __table_;
} unordered_set_f2692727;

typedef struct vector<long long, std::__1::allocator<long long>> {
    long long *__begin_;
    long long *__end_;
    struct __compressed_pair<long long *, std::__1::allocator<long long>> {
        long long *__first_;
    } __end_cap_;
} vector_c1c297d2;

