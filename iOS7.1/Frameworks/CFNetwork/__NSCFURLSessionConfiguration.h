//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

#import "NSCopying.h"
#import "NSSecureCoding.h"

@class NSArray, NSDictionary, NSHTTPCookieStorage, NSString, NSURLCache, NSURLCredentialStorage;

__attribute__((visibility("hidden")))
@interface __NSCFURLSessionConfiguration : NSObject <NSCopying, NSSecureCoding>
{
    struct __CFURLStorageSession *_legacyStorageSystem;
    BOOL _backgroundSession;
    BOOL _allowsCellularAccess;
    BOOL _discretionary;
    BOOL _sessionSendsLaunchEvents;
    BOOL _HTTPShouldUsePipelining;
    BOOL _HTTPShouldSetCookies;
    BOOL __credStorageSet;
    BOOL __urlCacheSet;
    BOOL __cookieStorageSet;
    BOOL _tasks_created_suspended;
    BOOL _skip_download_unlink;
    BOOL __preventsIdleSleep;
    BOOL __usePipeliningHeuristics;
    BOOL __startSynchronously;
    NSString *_identifier;
    unsigned int _requestCachePolicy;
    unsigned int _networkServiceType;
    NSDictionary *_connectionProxyDictionary;
    int _TLSMinimumSupportedProtocol;
    int _TLSMaximumSupportedProtocol;
    unsigned int _HTTPCookieAcceptPolicy;
    NSDictionary *_HTTPAdditionalHeaders;
    int _HTTPMaximumConnectionsPerHost;
    NSArray *_protocolClasses;
    NSURLCredentialStorage *__credStorage;
    NSURLCache *__urlCache;
    NSHTTPCookieStorage *__cookieStorage;
    NSString *_disposition;
    struct _CFHSTSPolicy *_HSTSPolicy;
    NSDictionary *__cfurlConnectionProperties;
    NSDictionary *__socketStreamProperties;
    NSArray *__contentDispHeadEncFallback;
    double _timeoutIntervalForRequest;
    double _timeoutIntervalForResource;
    double _connectionCachePurgeTimeout;
    double _connectionCacheCellPurgeTimeout;
}

+ (BOOL)supportsSecureCoding;
+ (id)backgroundSessionConfiguration:(id)arg1;
+ (id)ephemeralSessionConfiguration;
+ (id)defaultSessionConfiguration;
@property(copy) NSArray *_contentDispHeadEncFallback; // @synthesize _contentDispHeadEncFallback=__contentDispHeadEncFallback;
@property BOOL _startSynchronously; // @synthesize _startSynchronously=__startSynchronously;
@property BOOL _usePipeliningHeuristics; // @synthesize _usePipeliningHeuristics=__usePipeliningHeuristics;
@property BOOL _preventsIdleSleep; // @synthesize _preventsIdleSleep=__preventsIdleSleep;
@property(copy) NSDictionary *_socketStreamProperties; // @synthesize _socketStreamProperties=__socketStreamProperties;
@property(copy) NSDictionary *_cfurlConnectionProperties; // @synthesize _cfurlConnectionProperties=__cfurlConnectionProperties;
@property BOOL skip_download_unlink; // @synthesize skip_download_unlink=_skip_download_unlink;
@property BOOL tasks_created_suspended; // @synthesize tasks_created_suspended=_tasks_created_suspended;
@property double connectionCacheCellPurgeTimeout; // @synthesize connectionCacheCellPurgeTimeout=_connectionCacheCellPurgeTimeout;
@property double connectionCachePurgeTimeout; // @synthesize connectionCachePurgeTimeout=_connectionCachePurgeTimeout;
@property(retain) struct _CFHSTSPolicy *HSTSPolicy; // @synthesize HSTSPolicy=_HSTSPolicy;
@property NSString *disposition; // @synthesize disposition=_disposition;
@property BOOL _cookieStorageSet; // @synthesize _cookieStorageSet=__cookieStorageSet;
@property(retain) NSHTTPCookieStorage *_cookieStorage; // @synthesize _cookieStorage=__cookieStorage;
@property BOOL _urlCacheSet; // @synthesize _urlCacheSet=__urlCacheSet;
@property(retain) NSURLCache *_urlCache; // @synthesize _urlCache=__urlCache;
@property BOOL _credStorageSet; // @synthesize _credStorageSet=__credStorageSet;
@property(retain) NSURLCredentialStorage *_credStorage; // @synthesize _credStorage=__credStorage;
@property(copy) NSArray *protocolClasses; // @synthesize protocolClasses=_protocolClasses;
@property int HTTPMaximumConnectionsPerHost; // @synthesize HTTPMaximumConnectionsPerHost=_HTTPMaximumConnectionsPerHost;
@property(copy) NSDictionary *HTTPAdditionalHeaders; // @synthesize HTTPAdditionalHeaders=_HTTPAdditionalHeaders;
@property unsigned int HTTPCookieAcceptPolicy; // @synthesize HTTPCookieAcceptPolicy=_HTTPCookieAcceptPolicy;
@property BOOL HTTPShouldSetCookies; // @synthesize HTTPShouldSetCookies=_HTTPShouldSetCookies;
@property BOOL HTTPShouldUsePipelining; // @synthesize HTTPShouldUsePipelining=_HTTPShouldUsePipelining;
@property int TLSMaximumSupportedProtocol; // @synthesize TLSMaximumSupportedProtocol=_TLSMaximumSupportedProtocol;
@property int TLSMinimumSupportedProtocol; // @synthesize TLSMinimumSupportedProtocol=_TLSMinimumSupportedProtocol;
@property(copy) NSDictionary *connectionProxyDictionary; // @synthesize connectionProxyDictionary=_connectionProxyDictionary;
@property BOOL sessionSendsLaunchEvents; // @synthesize sessionSendsLaunchEvents=_sessionSendsLaunchEvents;
@property(getter=isDiscretionary) BOOL discretionary; // @synthesize discretionary=_discretionary;
@property BOOL allowsCellularAccess; // @synthesize allowsCellularAccess=_allowsCellularAccess;
@property unsigned int networkServiceType; // @synthesize networkServiceType=_networkServiceType;
@property double timeoutIntervalForResource; // @synthesize timeoutIntervalForResource=_timeoutIntervalForResource;
@property double timeoutIntervalForRequest; // @synthesize timeoutIntervalForRequest=_timeoutIntervalForRequest;
@property unsigned int requestCachePolicy; // @synthesize requestCachePolicy=_requestCachePolicy;
@property(copy) NSString *identifier; // @synthesize identifier=_identifier;
@property(getter=isBackgroundSession) BOOL backgroundSession; // @synthesize backgroundSession=_backgroundSession;
- (void)dealloc;
- (id)initWithCoder:(id)arg1;
- (void)encodeWithCoder:(id)arg1;
- (id)copyWithZone:(struct _NSZone *)arg1;
@property(retain, getter=URLCredentialStorage, setter=setURLCredentialStorage:) NSURLCredentialStorage *URLCredentialStorage;
@property(retain, getter=URLCache, setter=setURLCache:) NSURLCache *URLCache;
@property(retain, getter=HTTPCookieStorage, setter=setHTTPCookieStorage:) NSHTTPCookieStorage *HTTPCookieStorage;
- (id)initWithDisposition:(id)arg1;

@end

