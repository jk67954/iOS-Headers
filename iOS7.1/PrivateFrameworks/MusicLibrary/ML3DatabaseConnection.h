//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "NSObject.h"

@class ML3DatabaseConnectionPool, ML3DatabaseStatementCache, NSMutableArray, NSString, NSUUID;

@interface ML3DatabaseConnection : NSObject
{
    struct sqlite3 *_sqlitedb;
    BOOL _isOpen;
    ML3DatabaseStatementCache *_statementCache;
    unsigned int _statementsSinceLastCheckpoint;
    unsigned int _transactionLevel;
    BOOL _nestedTransactionWantsToRollback;
    NSMutableArray *_enqueuedTransactionCommitBlocks;
    ML3DatabaseConnectionPool *_owningPool;
    NSMutableArray *_registeredFunctions;
    NSMutableArray *_registeredModules;
    int _profilingLevel;
    NSString *_lastTracedStatement;
    int _willDeleteDatabaseNotifyToken;
    BOOL _isReadOnly;
    BOOL _automaticCheckpointingEnabled;
    id <ML3DatabaseConnectionDelegate> _connectionDelegate;
    NSString *_databasePath;
    unsigned int _journalingMode;
    NSUUID *_uniqueIdentifier;
    const void *_iTunesExtensions;
    unsigned int _checkpointStatementThreshold;
}

@property(nonatomic) unsigned int checkpointStatementThreshold; // @synthesize checkpointStatementThreshold=_checkpointStatementThreshold;
@property(nonatomic) BOOL automaticCheckpointingEnabled; // @synthesize automaticCheckpointingEnabled=_automaticCheckpointingEnabled;
@property(nonatomic) const void *iTunesExtensions; // @synthesize iTunesExtensions=_iTunesExtensions;
@property(readonly, nonatomic) NSUUID *uniqueIdentifier; // @synthesize uniqueIdentifier=_uniqueIdentifier;
@property(nonatomic) unsigned int journalingMode; // @synthesize journalingMode=_journalingMode;
@property(nonatomic, setter=setReadOnly:) BOOL isReadOnly; // @synthesize isReadOnly=_isReadOnly;
@property(readonly, nonatomic) NSString *databasePath; // @synthesize databasePath=_databasePath;
@property(nonatomic) __weak id <ML3DatabaseConnectionDelegate> connectionDelegate; // @synthesize connectionDelegate=_connectionDelegate;
- (void).cxx_destruct;
- (void)_handleDatabaseProfileStatement:(const char *)arg1 executionTimeNS:(unsigned long long)arg2;
- (void)_handleDatabaseTraceStatement:(const char *)arg1;
- (BOOL)_handleZombieSQLiteConnection:(struct sqlite3 *)arg1;
- (void)_executeTransactionCommitBlocks:(BOOL)arg1;
- (void)_resetUnfinalizedStatements;
- (void)_finalizeAllStatements;
- (BOOL)_isSharedMediaLibraryDatabase;
- (void)_updateProfilingLevel;
- (void)_logCurrentError;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statement:(id)arg2;
- (void)_logCurrentErrorWhilePerformingStatementOperation:(id)arg1 statementSQL:(id)arg2;
- (void)_createDatabaseFileIfNonexistent;
- (void)_createDatabaseDirectoryIfNonexistent;
- (BOOL)_databaseFileExists;
- (id)_registeredModuleNamed:(id)arg1;
- (BOOL)_executeStatement:(id)arg1;
- (BOOL)_validatePreparedStatement:(id)arg1 error:(id *)arg2;
- (id)_prepareStatement:(id)arg1 error:(id *)arg2;
- (id)_shortDescription;
- (BOOL)_internalEndTransactionAndCommit:(BOOL)arg1;
- (BOOL)_internalBeginTransactionWithBehaviorType:(unsigned int)arg1;
- (BOOL)_internalExecuteUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;
- (id)_internalExecuteQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (void)_setTransactionLevel:(unsigned int)arg1;
- (unsigned int)_transactionLevel;
- (id)_databaseFilePaths;
- (BOOL)_handleBusyLockWithNumberOfRetries:(int)arg1;
- (BOOL)_handleDatabaseCorruption;
- (void)_ensureConnectionIsOpen;
- (struct sqlite3 *)_sqliteHandle;
- (void)_setOwningPool:(id)arg1;
- (id)_owningPool;
- (int)checkpointDatabase;
- (BOOL)deleteDatabase;
- (id)sqliteError;
- (long long)lastInsertionRowID;
- (id)openBlobInTable:(id)arg1 column:(id)arg2 row:(long long)arg3 readOnly:(BOOL)arg4;
- (BOOL)registerModuleName:(id)arg1 moduleMethods:(struct sqlite3_module *)arg2;
- (BOOL)registerModule:(id)arg1;
- (BOOL)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4;
- (BOOL)registerFunctionName:(id)arg1 argumentCount:(int)arg2 functionPointer:(CDUnknownFunctionPointerType)arg3;
- (BOOL)registerFunctionName:(id)arg1 argumentCount:(int)arg2 block:(CDUnknownBlockType)arg3;
- (void)enqueueBlockForTransactionCommit:(CDUnknownBlockType)arg1;
- (BOOL)performTransactionWithBlock:(CDUnknownBlockType)arg1 usingBehaviorType:(unsigned int)arg2;
- (BOOL)performTransactionWithBlock:(CDUnknownBlockType)arg1;
- (BOOL)popToRootTransactionAndCommit:(BOOL)arg1;
- (BOOL)popTransactionAndCommit:(BOOL)arg1;
- (BOOL)pushTransactionUsingBehaviorType:(unsigned int)arg1;
- (BOOL)pushTransaction;
@property(readonly, nonatomic) BOOL transactionMarkedForRollBack;
@property(readonly, nonatomic) BOOL isInTransaction;
- (BOOL)executeUpdate:(id)arg1 withParameters:(id)arg2 error:(id *)arg3;
- (BOOL)executeUpdate:(id)arg1;
- (BOOL)tableExists:(id)arg1;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2 limitProperty:(id)arg3 limitValue:(long long)arg4;
- (id)executeQuery:(id)arg1 withParameters:(id)arg2;
- (id)executeQuery:(id)arg1;
- (BOOL)databasePathExists;
- (void)flush;
- (BOOL)close;
- (BOOL)_openWithFlags:(int)arg1 isRetry:(BOOL)arg2;
- (BOOL)open;
@property(nonatomic) int profilingLevel;
@property(readonly, nonatomic) BOOL isOpen;
- (BOOL)isEqual:(id)arg1;
- (id)description;
- (void)dealloc;
- (id)initWithDatabasePath:(id)arg1;
- (id)init;

@end

