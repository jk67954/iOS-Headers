//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import <iWorkImport/TSPObject.h>

@class NSConditionLock, NSDate, NSMutableArray, NSObject<OS_dispatch_group>, NSObject<OS_dispatch_queue>, NSObject<OS_dispatch_semaphore>, NSString, TSCENamedReferenceManager, TSKAccessController, TSKChangeGroup, TSKChangeNotifier;

__attribute__((visibility("hidden")))
@interface TSCECalculationEngine : TSPObject
{
    TSKAccessController *mAccessController;
    TSKChangeNotifier *mChangeNotifier;
    struct TSCEDependencyTracker *mDependencyTracker;
    int mXLImportDateMode;
    NSString *mPreviousLocaleIdentifier;
    NSDate *mCurrentDate;
    int mRecalculationThreadState;
    struct _opaque_pthread_t *mRecalculationThread;
    BOOL mShouldCancelRecalculationThread;
    unsigned int mCalculationPauseCount;
    NSObject<OS_dispatch_group> *mRecalcDispatchGroup;
    int mRecalcDispatchGroupSize;
    NSObject<OS_dispatch_semaphore> *mModifiedOwnersSem;
    struct __CFSet *mModifiedOwnersInThisRecalcCycle;
    BOOL mShouldRefillRecalcQueue;
    struct __CFDictionary *mReferenceResolvers;
    struct __CFDictionary *mLegacyGlobalIDStringToOwnerIDDictionary;
    struct hash_set<TSCECellReference, TSCECellReferenceHash, TSCECellReferenceEqual, std::__1::allocator<TSCECellReference>> mPendingDirtyCells;
    unsigned int mBatchingDirtyCellMarkingLevel;
    NSMutableArray *mCalculationStateObservers;
    unsigned int mSuppressWillModifyCallsLevel;
    NSConditionLock *mRecalculationInProgressConditionLock;
    unsigned int mNumberOfFormulas;
    TSCENamedReferenceManager *mNamedReferenceManager;
    TSKChangeGroup *mPendingChangesForAsyncNotification;
    NSObject<OS_dispatch_queue> *mWriteMutualExclusionQueue;
    BOOL mDirtyAllFormulasInDocumentDidLoad;
}

+ (void)setTableReferenceInterfaceObject:(struct TSCETableReferenceInterface *)arg1;
+ (id)allLocalizedFunctions;
+ (id)localizedCategoryArray;
+ (id)localizedFunctionCategoryDictionary;
+ (id)localizedNamesForFunctions:(id)arg1;
+ (id)localizedFalseStrings;
+ (id)localizedTrueStrings;
+ (void)loadLocalizedStrings;
+ (id)localizedModeToolTipForArgument:(short)arg1 modeIndex:(short)arg2 ofFunction:(id)arg3;
+ (id)localizedModeNameForArgument:(short)arg1 modeIndex:(short)arg2 ofFunction:(id)arg3;
+ (id)localizedToolTipForArgument:(short)arg1 ofFunction:(id)arg2;
+ (id)localizedNameForArgument:(short)arg1 ofFunction:(id)arg2;
+ (id)localizedCategoryForFunction:(id)arg1;
+ (id)localizedToolTipForFunction:(id)arg1;
+ (id)localizedNameForFunction:(id)arg1;
+ (id)localizedFunctionNameForMenuTag:(int)arg1;
+ (id)localizedFalseString;
+ (BOOL)localizedStringIsFalse:(id)arg1;
+ (id)localizedTrueString;
+ (BOOL)localizedStringIsTrue:(id)arg1;
+ (id)localizedTypeStringForArgumentType:(int)arg1;
+ (id)supportedFunctions;
+ (id)functionNameForLocalizedString:(id)arg1;
+ (id)functionLocalizationDictionary;
- (id).cxx_construct;
- (void).cxx_destruct;
- (hash_set_da7a7966)cellCoordinatesNeedingExcelImportForTable:(struct __CFUUID *)arg1;
- (unsigned int)delayedArchivingPriority;
- (id)packageLocator;
- (BOOL)shouldDelayArchiving;
- (id)initFromUnarchiver:(id)arg1;
- (void)saveToArchiver:(id)arg1;
- (id)allWholeOwnerDependenciesAsString;
- (id)allSpanningDependenciesAsString;
- (id)allCellDependenciesAsString;
- (void)assertAllDirtyCellsAreOnLeafStack;
- (void)assertDirtyPrecedentsCountConsistency;
- (id)documentRoot;
- (id)namedReferenceManager;
- (unsigned int)numberOfCellsWithFormulas;
- (void)removeCalculationStateObserver:(id)arg1;
- (void)addCalculationStateObserver:(id)arg1;
- (CDStruct_5744d895)parseStringAsReference:(id)arg1 contextResolver:(id)arg2 contextSheetName:(id)arg3 gettingSpecifiedSheetName:(id *)arg4 gettingSpecifiedTableName:(id *)arg5 gettingRest:(id *)arg6 gettingReferencesMatchingInputAsPrefix:(id *)arg7 gettingStickyBits:(char *)arg8 filterColons:(BOOL)arg9 referenceIsComplete:(BOOL)arg10;
- (CDStruct_5744d895)parseStringAsReference:(id)arg1 tableName:(id)arg2 rest:(id)arg3 contextResolver:(id)arg4 contextSheetName:(id)arg5 gettingReferencesMatchingInputAsPrefix:(id *)arg6 gettingStickyBits:(char *)arg7 filterColons:(BOOL)arg8 referenceIsComplete:(BOOL)arg9;
- (CDStruct_5744d895)parseStringAsReferenceComponentIntersection:(id)arg1 inResolver:(id)arg2 inTableNamed:(id)arg3 preferredGeometricResolver:(id)arg4 defaultResolver:(id)arg5 outStickyBits:(char *)arg6 gettingReferencesMatchingInputAsPrefix:(id *)arg7 requireFullMatches:(BOOL)arg8 filterColons:(BOOL)arg9;
- (CDStruct_0441cfb5)parseStringAsGeometricReferenceComponent:(id)arg1 inResolver:(id)arg2 outStickyBits:(char *)arg3 gettingReferencesMatchingInputAsPrefix:(id *)arg4;
- (hash_set_f2ddfd1c)precedentsOfCell:(CDStruct_78b871e1)arg1;
- (id)escapedStringForRangeReference:(CDStruct_5744d895)arg1 contextSheetName:(id)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(BOOL)arg4 forceEscaping:(BOOL)arg5;
- (id)escapedStringForRangeReference:(CDStruct_5744d895)arg1 hostTableID:(struct __CFUUID *)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(BOOL)arg4 forceEscaping:(BOOL)arg5;
- (id)stringForRangeReference:(CDStruct_5744d895)arg1 contextSheetName:(id)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(BOOL)arg4;
- (id)stringForRangeReference:(CDStruct_5744d895)arg1 hostTableID:(struct __CFUUID *)arg2 stickyBits:(unsigned char)arg3 isRangeWithFunction:(BOOL)arg4;
- (id)p_stringForRangeReference:(CDStruct_5744d895)arg1 hostTableID:(struct __CFUUID *)arg2 contextSheetName:(id)arg3 stickyBits:(unsigned char)arg4 isRangeWithFunction:(BOOL)arg5 quoteComponents:(BOOL)arg6 forceEscaping:(BOOL)arg7;
- (BOOL)referenceIsValid:(CDStruct_5744d895)arg1;
- (BOOL)rangeIsWithinTable:(CDStruct_5744d895)arg1;
- (struct)cellHandleRangeForRangeCoord:(struct)arg1 inTable:(struct __CFUUID *)arg2;
- (CDStruct_0441cfb5)cellHandleForCellCoord:(CDStruct_0441cfb5)arg1 inTable:(struct __CFUUID *)arg2;
- (struct)rangeCoordForCellHandleRange:(struct)arg1 inTable:(struct __CFUUID *)arg2;
- (CDStruct_0441cfb5)cellCoordForCellHandle:(CDStruct_0441cfb5)arg1 inTable:(struct __CFUUID *)arg2;
- (void)evaluateNextFormula;
- (void)endBatchingDirtyCellMarking;
- (void)beginBatchingDirtyCellMarking;
- (void)executeBlockWhileCalculationEngineIsNotWriting:(CDUnknownBlockType)arg1;
- (BOOL)recalculationIsPaused;
- (void)resumeRecalculation;
- (void)pauseRecalculation;
- (void)endSuppressingWillModifyCalls;
- (void)beginSuppressingWillModifyCalls;
- (void)blockUntilRecalcIsCompleteWithTimeout:(double)arg1;
- (void)blockUntilRecalcIsCompleteOnNewThreadUntilDate:(id)arg1;
- (BOOL)isCellReferenceDirty:(CDStruct_78b871e1 *)arg1;
- (BOOL)cellContainsAFormula:(CDStruct_78b871e1 *)arg1;
- (void)ownerIsDirty:(struct __CFUUID *)arg1;
- (void)geometryVolatileFunctionsAreDirtyInOwner:(struct __CFUUID *)arg1;
- (void)compassVolatileFunctionsAreDirty;
- (void)locationVolatileFunctionsAreDirty;
- (void)localeVolatileFunctionsAreDirty;
- (void)randomVolatileFunctionsAreDirty;
- (void)timeVolatileFunctionsAreDirty;
- (void)detectAndRepairConsistencyViolations;
- (void)indirectCallsAreDirty;
- (void)allFunctionsAreDirty;
- (void)rangeReferenceIsDirty:(CDStruct_5744d895 *)arg1;
- (void)updateDirtyPrecedentCountsForRemovedIndex:(int)arg1 inTable:(struct __CFUUID *)arg2 forColumns:(BOOL)arg3;
- (void)headerStateOfTableChanged:(struct __CFUUID *)arg1 changeIsForColumns:(BOOL)arg2;
- (void)cellReferenceIsDirty:(const CDStruct_78b871e1 *)arg1;
- (id)rewriteFormulasWithSpec:(id)arg1;
- (BOOL)referenceWasGuaranteedCleanAtRecalcCycleStart:(CDStruct_39788696)arg1;
- (BOOL)cellIsInACycle:(CDStruct_78b871e1 *)arg1;
- (BOOL)allCellsAreClean;
- (int)dirtyCellCount;
- (int)dirtyCellCountInOwner:(struct __CFUUID *)arg1;
- (void)removeFormulasFromRange:(CDStruct_5744d895)arg1;
- (void)removeAllFormulasFromOwner:(struct __CFUUID *)arg1;
- (void)removeFormula:(CDStruct_a91f2c80)arg1 inOwner:(struct __CFUUID *)arg2;
- (void)replaceFormula:(CDStruct_a91f2c80)arg1 inOwner:(struct __CFUUID *)arg2 precedentIterator:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4 hasRandomVolatileFunctions:(char *)arg5;
- (void)addFormula:(CDStruct_a91f2c80)arg1 inOwner:(struct __CFUUID *)arg2 precedentIterator:(CDUnknownFunctionPointerType)arg3 userData:(void *)arg4 hasRandomVolatileFunctions:(char *)arg5;
- (void)setOwnerIDForLegacyGlobalID:(id)arg1 ownerID:(struct __CFUUID *)arg2;
- (struct __CFUUID *)ownerIDForLegacyGlobalID:(id)arg1 registeringIfNeeded:(BOOL)arg2;
- (id)resolverForTableID:(struct __CFUUID *)arg1;
- (void)clearLegacyGlobalIDs;
- (BOOL)allOwnersRegistered;
- (BOOL)ownerIsRegistered:(struct __CFUUID *)arg1;
- (void)unregisterOwner:(struct __CFUUID *)arg1;
- (int)registerOwnerWithOwnerID:(struct __CFUUID *)arg1 owner:(id)arg2 referenceResolver:(id)arg3;
- (int)forwardRegisterOwnerWithOwnerID:(struct __CFUUID *)arg1 legacyGlobalID:(id)arg2;
- (id)previousLocaleIdentifier;
- (void)setXLImportDateMode:(int)arg1;
- (int)xlImportDateMode;
- (id)currentDate;
- (void)updateCurrentDate;
- (void)stopRecalculationThread;
- (void)startRecalculationThread;
- (BOOL)shouldCancelRecalculationThread;
- (void)recalculateWithTimeout:(double)arg1;
- (void)recalcHoldingWriteLock;
- (BOOL)recalcHoldingReadLock;
- (void)p_recalcOneCellHoldingReadLock:(CDStruct_78b871e1)arg1 formulaOwner:(id)arg2 hasExistingCalculatedPrecedents:(BOOL)arg3 isInACycle:(BOOL)arg4;
- (void)p_enqueueTaskForCell:(CDStruct_78b871e1)arg1;
- (CDStruct_78b871e1)p_refillRecalcQueue;
- (int)preferredDispatchQueueSize;
- (void)invalidateAfterRecalc;
- (void)dealloc;
- (void)documentDidLoad;
- (id)changeNotifier;
- (void)setChangeNotifier:(id)arg1;
- (id)accessController;
- (void)setAccessController:(id)arg1;
- (id)initWithContext:(id)arg1;
- (void)applicationWillResignActive:(id)arg1;
- (void)applicationDidBecomeActive:(id)arg1;
- (void)p_removeApplicationNotification;
- (void)p_addApplicationNotification;
- (id)retain;
- (id)init;
- (id)allOwnerIDs;

@end

